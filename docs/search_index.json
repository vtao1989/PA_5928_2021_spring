[["index.html", "PA 5928 Data Management &amp; Visualization with R (Spring 2021) Chapter 1 Course Syllabus 1.1 Course description 1.2 Course prerequisites 1.3 Logistics 1.4 Course learning outcomes 1.5 Readings 1.6 Weekly assignment and final project 1.7 Course schedule (Tentative) 1.8 Homework and projects collaboration and submission policy", " PA 5928 Data Management &amp; Visualization with R (Spring 2021) Tao Tao (University of Minnesota) Chapter 1 Course Syllabus 1.1 Course description Introduction to RStudio software. Use of RStudio to carry out R file and related dataset management functions. Tools and techniques for data analysis and statistical programming in quantitative research or related applied areas. Topics include data selection, data manipulation, and data visualization (including charts, plots, histograms, maps, and other graphs). 1.2 Course prerequisites Introductory statistics; ability to create bar graphs, line graphs, and scatter plots in MS Excel; and familiarity with principles of data visualization. 1.3 Logistics Lecture section: 2:30 - 3:45 pm Tuesday and Thursday Instructor: Tao Tao, taotao@umn.edu Instruction mode: Completely online (Link in Canvas) Office hour: 4:00-5:00 Tuesday (Link in Canvas) or by appointment Canvas: All course notes will be posted in this course website, but links will be updated on Canvas simultaneously. Canvas will also be used to submit your assignments, final project, and grades. Make sure you have enabled the notification of this course on Canvas. 1.4 Course learning outcomes At the end of this course, students will be able to: Use RStudio to carry out R file and related database management Use R to work with different types of databases and conduct basic data management Use R to visualize data with different types of plots Use R to carry out exploratory data analysis 1.5 Readings The online note is the main study material in this course. The course has several supplementary reading materials, which are available on Canvas. 1. Wickham, H. (2016). ggplot2: elegant graphics for data analysis. Springer. 2. Wickham, H., &amp; Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data. OReilly Media, Inc. 1.6 Weekly assignment and final project Weekly assignment includes in-class exercise and after-class assignment. Students are required to submit both of them with necessary notes. Weekly assignment is always due on next Monday 11:59 pm. Missing deadline results in a penalty in grades (10% of the total grades for each 24 hours, less than 24 hours will be counted as 24 hours). Check your files before submission. Wrong submission results in a penalty in grades (20% of the total grades). Students will use the knowledge from this course to complete a final project (data analysis for a interested research question and make a poster to show off their work). You can find the description of the final project in the chapter of final project). Grading policy Weekly assignment: 70% Final project: 30% Weekly assignment grading rubric Requirements Grades Codes could generate the results required by the problems 6 Necessary notes to indicate the general idea (usage, function, purpose, or mechanism) 3 Codes and notes are neat and well-organized 1 1.7 Course schedule (Tentative) Week Date Topic Week 1 Tue Mar 9 Course introduction + Introduction to RStudio Week 1 Thu Mar 11 Introduction to R Week 2 Tue Mar 16 Data source introduction Week 2 Thu Mar 18 Data manipulation with base functions Week 3 Tue Mar 23 Data manipulation with dplyr Part I Week 3 Thu Mar 25 Data manipulation with dplyr Part II Week 4 Tue Mar 30 Data visualization with base functions Week 4 Thu Apr 1 Data visualization with ggplot2 Part I Week 5 Spring break Week 6 Tue Apr 13 Data visualization with ggplot2 Part II Week 6 Thu Apr 15 Data visualization with ggplot2 Part III Week 7 Tue Apr 20 Simple statistics in R Part I Week 7 Thu Apr 22 Simple statistics in R Part II Week 8 Tue Apr 27 Exploratory Data Analysis Part I Week 8 Thu Apr 29 Exploratory Data Analysis Part II 1.8 Homework and projects collaboration and submission policy Students can discuss their works with other students, but must code and write up notes by themselves. Plagiarism is not allowed by the university policies. Please do be careful about this. Weekly assignments and projects should be submitted through Canvas. If you cannot attend the class, please write a email to the instructor including a valid reason before the class. When you communicate the instructor with emails, please include PA 5928 at the beginning of your title. "],["introduction-to-rstudio.html", "Chapter 2 Introduction to RStudio 2.1 What is R 2.2 What is RStudio 2.3 Install R + RStudio 2.4 Familiar with the user interface of RStudio 2.5 Create and save R file 2.6 Print Hello, world 2.7 Install and use R Packages 2.8 Make notes 2.9 Tips", " Chapter 2 Introduction to RStudio In this chapter, we will cover some basic operations in RStudio. 2.1 What is R R is a type of programming language and supports many tasks including statistical computation (data cleaning, data management, statistics, machine learning) and graphics (static plots and interactive plots). You can also use it to create website (like this course website), write papers, analyze texts, etc. The most important thing is that R is free and easy to use, thats why it has been applied in many fields. 2.2 What is RStudio RStudio is a programming software for editing and running R code. It has many great features to make R programming easier! 2.3 Install R + RStudio For better coding and running R, you should install both R and RStudio. You could code R with the installation of R only, however, RStudio provides you with more convenience in coding. In this course, we will use RStudio to do all the course lectures and exercises. Please make sure you install both of them! R could be downloaded here and RStudio could be downloaded here (choose the free version). Both Windows OS (Operating System) and Mac OS are supported. You should choose the right one you need for your own system. (If you have any questions about the installation of R or RStudio, please come during the office hours or ask IT for help). 2.4 Familiar with the user interface of RStudio Below is a screenshot of the user interface of RStudio. You will find couple of panes/windows with different usages.(Selvam 2019) Menu/Tool Bar Source The pane where you write and edit your codes. Environment/History Environment lists all the variables that you are currently using. History presents the codes you have run before. Console Console is the original R interactive window. You could run codes and see the results here. Plot/Help Plot window shows the output figures. Help window presents the information of the function or package you are checking. 2.5 Create and save R file Three ways to create an R file in the RStudio: 1. Menu -&gt; File -&gt; New File -&gt; R Script 2. Shortcut: Ctrl + Shift + N 3. Tool Bar -&gt; New file button Also three ways to save R file 1. Menu -&gt; File -&gt; Save 2. Shortcut: Ctrl + S 3. Tool Bar -&gt; Save file button 2.6 Print Hello, world Its time to code something and output the results! Lets print the very classic Hello, world! with print() function. After coding, we could run our codes in several ways: Select the codes or put the cursor in the line of your code, and click the Run button located in the right-top position of the source pane. Select the codes or put the cursor in the line of your code, and use shortcut: Ctrl + Enter You could also click the Re-run button near the Run button to re-run the codes you ran last time. print(&#39;Hello, world!&#39;) ## [1] &quot;Hello, world!&quot; Because what we need to output here is a string variable, we have to put them in the quotation mark. Either single quotation or double quotation mark works well. Lets see another example. print(5928) ## [1] 5928 Here, 5928 is an integer and we do not need to put them in the quotation marks. 2.7 Install and use R Packages R is easy to use because it has tons of packages with different usages. These packages could help you accomplish some complex tasks with just several lines of codes (another reason we like to use R). Some packages have already been installed and you could use them directly, which are base packages. However, most of the packages have to be installed before being called in the codes. There are couple of ways you could install a package. Lets take the tidyverse package for example. 1. Manu -&gt; Tools -&gt; Install Packages... -&gt; Input the package name -&gt; Click Install button 2. Use the code below: install.packages(&quot;gbm&quot;) After the installation of the package, you have import it with library() function before you use the functions in the package. library(gbm) ## Loaded gbm 2.1.8 We will spend more time in future classes to explore the various R packages and their usages. 2.8 Make notes It is important to write notes for your codes. It could help others or even yourself understand your codes easily. Use hash tag to indicate the notes. For example, gbm1 &lt;- gbm(AvgMet~PkAreaH+StpNumH+DisToMin, # formula data=MetM, # dataset var.monotone=c(+1, rep(0,10),rep(0,15)), distribution=&quot;gaussian&quot;, # see the help for other choices n.trees=5000, # number of trees shrinkage=0.001, # shrinkage or learning rate, 0.001 to 0.1 usually work interaction.depth=6, # 1: additive model, 2: two-way interactions, etc. bag.fraction = 0.5, # subsampling fraction, 0.5 is probably best n.minobsinnode = 10, # minimum total weight needed in each node cv.folds = 5) R will not run the codes after hash tags in each line. Please try to write simple but necessary notes for the codes. Keep this as a good habit and you will thank yourself in the future. 2.9 Tips You could divide your codes into sections by putting chunks before each sections with the shortcut Ctrl + Shift + R. This will help you organize your codes. You could run the codes in the chunk by the shortcut Ctrl + Alt + T. Use ? or help() function to find the related instruction or help page, for example, if you want to find the instruction of library() function, just code ?library or help(library) Both will direct you to the instruction page in the help window where you can find how to use these functions. "],["introduction-to-r.html", "Chapter 3 Introduction to R 3.1 Why R and why not R? 3.2 Variable name 3.3 Variable types 3.4 Operations 3.5 Data structures 3.6 Conditional statement (if) 3.7 Loops 3.8 Functions", " Chapter 3 Introduction to R 3.1 Why R and why not R? Before learning R, we need to know why we use R and why we do not use R. Advantages of R (More flexible but less formal) Free and Open source More advanced technique packages Deal with more than one datasets (big data) at the same time Deal with not only data analysis tasks (data visualization, text analysis, creating website, etc.) Advantages of STATA (More formal but less flexible) More algorithms, packages, and implementations of econometrics Faster It is supported by Statacorp so the result is reliable It presents results in a clear format Syntax is simple and standard for most data analysis Help document is formal Besides those advantages, they have a lot of overlaps with each other. People cannot say one is absolutely better than the other. People choose them based on their task requirements. Sometimes, people use both of them for their daily work (e.g., my laptop has both R and STATA). 3.2 Variable name A variable is used to store data including value, vector, data frame, etc., which R could use to manipulate (tutorialspoint 2019b). This chapter introduces variable types, operations between variables, data structures, conditional statements, loops, and functions. Before we start, lets first see how to name a variable. The valid variable name could be constructed with letters, numbers, the dot character (.), and underline character (_). Besides that, a valid variable name should start with a letter or the dot character not followed by a number. Below are some examples of variable names (either good or not good). Examples Validity Discussion var.name  var_name  _var_name  Cannot start with the underline .var_name  var%name  Cannot contain % .2var_name  Cannot use the dot followed by a number to start a variable name 2var_name  Cannot start with a number 3.3 Variable types There are several types of variables which R could recognize, including character, numeric, integer, logical, and complex (Blischak et al. 2019). The type of one variable is decided by the type of value it stores. We can use class() function to check the type of each variable. Character (also known as strings) v &lt;- &quot;Hello, world!&quot; class(v) ## [1] &quot;character&quot; Numeric (real or decimal number/integer) v &lt;- 59.28 class(v) ## [1] &quot;numeric&quot; Integer (L tells R that this number is an integer) v &lt;- 2L class(v) ## [1] &quot;integer&quot; v &lt;-2 class(v) ## [1] &quot;numeric&quot; Logical (Usually True or false) v &lt;- TRUE class(v) ## [1] &quot;logical&quot; v &lt;- FALSE class(v) ## [1] &quot;logical&quot; Complex (complex number is another type of number, different with real number) v &lt;- 1 + 4i class(v) ## [1] &quot;complex&quot; It is important to clearly know the type of the variable since different types of variables may have different functions or operations to deal with. Another caveat is that the outlook of the variable may not show its real variable type. For example, a common situation is listed below. v &lt;- &quot;59.28&quot; class(v) ## [1] &quot;character&quot; Here, the number has quotation marks outside, which means it has been transferred to type character. Therefore, please be careful about variable types! 3.4 Operations An operation tells R the mathematical or logical manipulations among variables (tutorialspoint 2019a). 3.4.1 Assignment operations Assignment operators assign values to variables. Left assignment a &lt;- 1 b &lt;&lt;- &quot;Hello, world!&quot; c = c(1, 3, 4) Right assignment 1 -&gt; a 2 -&gt;&gt; b 3.4.2 Arithmetic operations Add 1 + 1 ## [1] 2 Subtract 5 - 3 ## [1] 2 Multiple 3 * 5 ## [1] 15 Divide 5 - 3 ## [1] 2 Power 5 ^ 2 ## [1] 25 5 ** 2 # you can also do power operation like this ## [1] 25 Mode (find the remainder) 5 %% 2 ## [1] 1 3.4.3 Relational operations The relational operators compare the two elements and return a logical value (TRUE or FALSE). Larger 3 &gt; 4 ## [1] FALSE 5 &gt; 3 ## [1] TRUE Smaller 3 &lt; 5 ## [1] TRUE 4 &lt; 2 ## [1] FALSE Equal 4 == 4 ## [1] TRUE 5 == 4 ## [1] FALSE No less than (larger or equal to) 3 &gt;= 4 ## [1] FALSE 2 &gt;= 2 ## [1] TRUE No larger than (smaller or equal to) 5 &lt;= 2 ## [1] FALSE 5 &lt;= 5 ## [1] TRUE Not equal 3 != 4 ## [1] TRUE 3 != 3 ## [1] FALSE 3.4.4 Logical operations Logical operators are operations only for logical, numeric, or complex variable types. Most of the time, we apply them on logical values or variables. For numeric variables, 0 is considered FALSE and non-zero numbers are taken as TRUE (DataMentor 2019). You could use T for TRUE or F for FALSE as abbreviation. Logical And TRUE &amp; TRUE ## [1] TRUE FALSE &amp; TRUE ## [1] FALSE FALSE &amp; FALSE ## [1] FALSE Logical Or TRUE | TRUE ## [1] TRUE FALSE | TRUE ## [1] TRUE FALSE | FALSE ## [1] FALSE Logical Not ! TRUE ## [1] FALSE ! FALSE ## [1] TRUE 3.5 Data structures Variables and values could construct different data structures including vector, matrix, data frame, list, and factor (Kabacoff 2019). Vector You could create a vector with c() function. a &lt;- c(5, 9, 2, 8) # create a numeric vector a # show the value of this vector ## [1] 5 9 2 8 b &lt;- c(&#39;hello&#39;, &#39;world&#39;, &#39;!&#39;) # character vector b ## [1] &quot;hello&quot; &quot;world&quot; &quot;!&quot; c &lt;- c(5, &#39;good&#39;) # if you create a vector containing mixed variable types, such as numeric and character, R will restrict them to be the same variable type, here, character c ## [1] &quot;5&quot; &quot;good&quot; You could select elements in the vector by using var_name[#]. Please pay attention on how R indexes its elements in the data structure. a[3] # select the 3rd element ## [1] 2 b[1:3] # select from the 1st to the 3rd element ## [1] &quot;hello&quot; &quot;world&quot; &quot;!&quot; c[2] # select the 2nd element ## [1] &quot;good&quot; 1:3 means from 1 to 3, so it actually stands for three numbers here, which are 1, 2, 3. Matrix You could create a matrix using matrix() function. a &lt;- matrix(1:6, # the data to be put in the matrix, here we use numbers from 1 to 6 nrow = 2, # number of rows in the matrix ncol = 3, # number of columns in the matrix byrow = FALSE) # how to arrange the data in the matrix, FALSE means by columns, TURE means by rows. a ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 For variable selection, the intuitive way is using coordinates. a[2,3] # select the elements in the 2nd row and 3rd column ## [1] 6 You could also select the entire row or column. a[ ,2] # the 2nd column ## [1] 3 4 a[1, ] # the 1st row ## [1] 1 3 5 Data frame Data frame is a frequently-used data type in R. It could include columns with different types of values stored in them. Lets create a data frame with mixed variables types using data.frame() function. ID &lt;- c(1:4) # create ID Name &lt;- c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;) # create Name Score &lt;- c(69.5, 77.5, 81.5, 90) # create Score df &lt;- data.frame(ID, Name, Score) # combine the variables into one data frame called df df ## ID Name Score ## 1 1 A 69.5 ## 2 2 B 77.5 ## 3 3 C 81.5 ## 4 4 D 90.0 We created a data frame storing the students ID, name, and their test scores. We can select elements from this data frame with couple of ways. df[2,3] # 2nd row and 3rd column ## [1] 77.5 df[&#39;ID&#39;] # column of variable ID ## ID ## 1 1 ## 2 2 ## 3 3 ## 4 4 df[c(&#39;ID&#39;, &#39;Score&#39;)] # column of ID and Score ## ID Score ## 1 1 69.5 ## 2 2 77.5 ## 3 3 81.5 ## 4 4 90.0 There is another way to select the column by its name, which is more frequently used. When you type $ after the name of the data frame, RStudio will list all the variables in that data frame. df$Name # column of variable Name ## [1] A B C D ## Levels: A B C D List A list could store mixed types of values, which is different from vector. a &lt;- list(ID = c(1, 2), Name = c(&#39;A&#39;, &#39;B&#39;), Score = c(69.5, 89)) When you want to select elements from a list, you could do it in a similar way as a vector. However, list does not define row or column, so you cannot use 2-D coordinates to select elements like a data frame. a[1] ## $ID ## [1] 1 2 a[2:3] ## $Name ## [1] &quot;A&quot; &quot;B&quot; ## ## $Score ## [1] 69.5 89.0 Someone might be confusing since list looks similar to data frame. Here is a good discussion about it. Due to the time limitation, we will not cover this discussion in class. The main idea is that list is more flexible than data frame, while data frame has more restrictions. However, since data frame is more similar to 2-D table structure which is more frequently used in our daily work, we use data frame more than list. Factor Factor is the nominal variable in R. This type will be very useful when we want to analyze data from different groups, such as gender, school, etc. a &lt;- c(1, 2, 1, 2, 3, 3, 1, 1) class(a) ## [1] &quot;numeric&quot; afactor &lt;- factor(a) class(afactor) ## [1] &quot;factor&quot; 3.6 Conditional statement (if) if (test_expression){ statement_1 } else { statement_2 } If the test_expression returns TRUE, then the codes will go to statement_1, if it returns FALSE, the codes will go to statement_2. You could also omit the else part. if (test_expression){ statement_1 } If the test_expression returns FALSE, the codes will continue to next line. x &lt;- 5 if (x &gt; 3){ print(&#39;x is larger than 3&#39;) } else { print(&#39;x is not larger than 3&#39;) } ## [1] &quot;x is larger than 3&quot; x &lt;- 1 if (x &gt; 3){ print(&#39;x is larger than 3&#39;) } Some other conditional statements include switch and which. 3.7 Loops Loops help us repeat the codes we want to run in more than one time. for loop is the intuitive and commonly-used one. for (range){ statement } range will provide the range for a variable. for (i in 1:3){ print(i) } ## [1] 1 ## [1] 2 ## [1] 3 3.8 Functions Functions are codes have been defined with specific usage. You only need to input some necessary variables and functions will do the tasks and return the result. For example, sum() function could help you add the all the numbers togethor in a vector or data frame and return the result. sum(c(1, 4, 10, 5)) ## [1] 20 Another example is mean() function, which could help you average the numbers in a vector or data frame and return the result. mean(c(1, 4, 10, 5)) ## [1] 5 It is important to use the right function to do the right task. To do this, you have to be familiar with the functions you are using. It needs more practice. "],["data-manipulation-with-base-functions.html", "Chapter 4 Data Manipulation with Base Functions 4.1 Import and save datasets 4.2 View data 4.3 Data selection 4.4 Conditional selection 4.5 Deal with missing values 4.6 Subset 4.7 Merge two datasets 4.8 Column operation", " Chapter 4 Data Manipulation with Base Functions We will introduce how to manipulate with different datasets using base functions in R. 4.1 Import and save datasets There couple of ways to importing and saving different types of datasets (Quick-R 2019c, 2019a). 4.1.1 Import data from commonly-used file types CSV file mydata &lt;- read.csv(&#39;c:/minneapolis.csv&#39;, ## file location and name header = TRUE, ## read the first sep = &#39;,&#39;) ## which type of separation EXCEL file library(readxl) dataset &lt;- read_excel(&#39;c:/mydata.xlsx&#39;, # file location and name sheet = &#39;data&#39;) # name or index of the sheet dta STATA file library(foreign) mydata &lt;- read.dta(&#39;c:/mydata.dta&#39;) # file location and name Below is an easy way to load datasets in RStudio. System tool Besides importing data by codes, you could also import data with the system tool. If this is your first time to use this tool, there may be a process to install the packages depending your options. But dont worry, RStudio can do it by itself. You just need to click the button to approve the installation. File -&gt; Import dataset -&gt; choose the type of dataset you want to import There are some other options or parameters you could set in the import functions listed above (e.g., specify a variable type or try to skip some of the rows). Sometimes it is sort of complex to do it. So for me, I just do those things after I import the dataset. 4.1.2 Save file CSV file write.csv(df, # data &#39;c:/filename.csv&#39;) # file location and name EXCEL file library(xlsx) write.xlsx(mydata, # data &quot;c:/mydata.xlsx&quot;) # file location and name dta STATA file library(foreign) write.dta(mydata, &quot;c:/mydata.dta&quot;) Usually, it takes less time to save file in CSV and CSV file has a smaller size in storage. 4.1.3 File location As you can see in the examples, you need to specify the location (or path) of the file to make sure that R could find your file in the right position. Usually you could find it by checking the system property of the file. You could avoid this. First, put your R file and dataset in the same folder. Then start the R file by double clicking it. R will use the folder where the R file locates as the working folder. Then you could only specify the name of the file. This is recommended. Since it will be easier for others to check your codes since they do not need to change the path of the file. 4.2 View data You could view the variable names and simple description in the Environment pane on the right-top position of RStudio. If you want to view more information, click the variable name and view the variable in a new window. Here, we use the Minneapolis one-year ACS data as a example. minneapolis &lt;- read.csv(&#39;minneapolis.csv&#39;) You could also view the data in the new window by View() function. Please pay attention that it is initial-capitalized. View(minneapolis) View the first ten observations (rows) in the dataset. stands for double class, which is a sub-type of numerical variable type. head(minneapolis, n = 10) ## YEAR SEX AGE RACE HISPAN EDUC EMPSTAT INCTOT FTOTINC ## 1 2010 2 59 1 0 10 1 33100 49100 ## 2 2010 2 29 1 0 10 1 16000 49100 ## 3 2010 1 54 2 0 7 3 1100 NA ## 4 2010 2 47 2 0 5 2 4800 4800 ## 5 2010 1 59 2 0 10 2 0 4800 ## 6 2010 2 10 2 0 1 0 NA 4800 ## 7 2010 1 24 1 0 5 1 15000 15000 ## 8 2010 1 26 2 3 6 1 18000 18000 ## 9 2010 1 51 1 0 6 1 35200 74400 ## 10 2010 2 47 1 0 6 1 39200 74400 view the last five observations in the dataset. tail(minneapolis, n = 5) ## YEAR SEX AGE RACE HISPAN EDUC EMPSTAT INCTOT FTOTINC ## 25531 2019 2 66 1 0 7 1 77000 77000 ## 25532 2019 2 29 3 1 6 3 0 38000 ## 25533 2019 1 28 3 1 0 1 38000 38000 ## 25534 2019 1 6 3 1 1 0 NA 38000 ## 25535 2019 1 1 3 1 0 0 NA 38000 List the variables in the dataset (Quick-R 2019b). names(minneapolis) ## [1] &quot;YEAR&quot; &quot;SEX&quot; &quot;AGE&quot; &quot;RACE&quot; &quot;HISPAN&quot; &quot;EDUC&quot; &quot;EMPSTAT&quot; ## [8] &quot;INCTOT&quot; &quot;FTOTINC&quot; colnames(minneapolis) ## [1] &quot;YEAR&quot; &quot;SEX&quot; &quot;AGE&quot; &quot;RACE&quot; &quot;HISPAN&quot; &quot;EDUC&quot; &quot;EMPSTAT&quot; ## [8] &quot;INCTOT&quot; &quot;FTOTINC&quot; List the structure of the dataset. str(minneapolis) ## &#39;data.frame&#39;: 25535 obs. of 9 variables: ## $ YEAR : int 2010 2010 2010 2010 2010 2010 2010 2010 2010 2010 ... ## $ SEX : int 2 2 1 2 1 2 1 1 1 2 ... ## $ AGE : int 59 29 54 47 59 10 24 26 51 47 ... ## $ RACE : int 1 1 2 2 2 2 1 2 1 1 ... ## $ HISPAN : int 0 0 0 0 0 0 0 3 0 0 ... ## $ EDUC : int 10 10 7 5 10 1 5 6 6 6 ... ## $ EMPSTAT: int 1 1 3 2 2 0 1 1 1 1 ... ## $ INCTOT : num 33100 16000 1100 4800 0 NA 15000 18000 35200 39200 ... ## $ FTOTINC: num 49100 49100 NA 4800 4800 4800 15000 18000 74400 74400 ... The table below lists the variable names and their descriptions. Variable Name Description YEAR Year The year when the data was collected. SEX Gender Gender of the respondent. 1 = Male 2 = Female AGE Age Age of the respondent (0 indicates age is smaller than 1). RACE Race Race of the respondent. 1 = White 2 = Black/African American/Negro 3 = American Indian or Alaska Native HISPAN Hispanic origin Hispanic origin of the respondent. 0 = Not Hispanic 1 = Mexican 2 = Puerto Rican 3 = Cuban 4 = Other EDUC Educational attainment Respondents educational attainment, as measured by the highest year of school or degree completed. 0 = N/A or no schooling 1 = Nursery school to grade 4 2 = Grade 5, 6, 7, or 8 3 = Grade 9 4 = Grade 10 5 = Grade 11 6 = Grade 12 7 = 1 year of college 8 = 2 years of college 9 = 3 years of college 10 = 4 years of college 11 = 5+ years of college EMPSTAT Employment status Whether the respondent was a part of the labor force  working or seekingwork  and, if so, whether the person was currently unemployed. 0 = N/A 1 = Employed 2 = Unemployed 3 = Not in labor force INCTOT Total personal income Each respondents total pre-tax personal income or losses from all sources for the previous year FTOTINC Total family income The total pre-tax money income earned by ones family from all sources for the previous year. List the dimensions of the dataset dim(minneapolis) ## [1] 25535 9 List the number of rows in the dataset nrow(minneapolis) ## [1] 25535 List the number of columns in the dataset. ncol(minneapolis) ## [1] 9 4.3 Data selection Select one column with 5 rows of observations. head(minneapolis$YEAR, n = 5) # by name ## [1] 2010 2010 2010 2010 2010 head(minneapolis[1], n = 5) # by index ## YEAR ## 1 2010 ## 2 2010 ## 3 2010 ## 4 2010 ## 5 2010 Select several columns with 5 rows of observations. head(minneapolis[c(&#39;YEAR&#39;, &#39;SEX&#39;)], n = 5) # by name ## YEAR SEX ## 1 2010 2 ## 2 2010 2 ## 3 2010 1 ## 4 2010 2 ## 5 2010 1 head(minneapolis[c(1, 3, 5)], n = 5) # by index ## YEAR AGE HISPAN ## 1 2010 59 0 ## 2 2010 29 0 ## 3 2010 54 0 ## 4 2010 47 0 ## 5 2010 59 0 Select one row by index minneapolis[2,] # by index number ## YEAR SEX AGE RACE HISPAN EDUC EMPSTAT INCTOT FTOTINC ## 2 2010 2 29 1 0 10 1 16000 49100 Select several rows minneapolis[2:3, ] # by index ## YEAR SEX AGE RACE HISPAN EDUC EMPSTAT INCTOT FTOTINC ## 2 2010 2 29 1 0 10 1 16000 49100 ## 3 2010 1 54 2 0 7 3 1100 NA minneapolis[c(1,5,9), ] # by index ## YEAR SEX AGE RACE HISPAN EDUC EMPSTAT INCTOT FTOTINC ## 1 2010 2 59 1 0 10 1 33100 49100 ## 5 2010 1 59 2 0 10 2 0 4800 ## 9 2010 1 51 1 0 6 1 35200 74400 4.4 Conditional selection newdata &lt;- minneapolis[minneapolis$YEAR == 2010, ] head(newdata) ## YEAR SEX AGE RACE HISPAN EDUC EMPSTAT INCTOT FTOTINC ## 1 2010 2 59 1 0 10 1 33100 49100 ## 2 2010 2 29 1 0 10 1 16000 49100 ## 3 2010 1 54 2 0 7 3 1100 NA ## 4 2010 2 47 2 0 5 2 4800 4800 ## 5 2010 1 59 2 0 10 2 0 4800 ## 6 2010 2 10 2 0 1 0 NA 4800 newdata &lt;- minneapolis[(minneapolis$YEAR == 2010) &amp; (minneapolis$EDUC &lt; 5), ] head(newdata) ## YEAR SEX AGE RACE HISPAN EDUC EMPSTAT INCTOT FTOTINC ## 6 2010 2 10 2 0 1 0 NA 4800 ## 11 2010 2 8 1 0 1 0 NA 74400 ## 41 2010 1 16 2 0 4 3 0 7900 ## 42 2010 2 85 1 0 2 3 12000 NA ## 47 2010 1 10 3 0 1 0 NA NA ## 55 2010 1 5 1 0 1 0 NA 132000 newdata &lt;- minneapolis$INCTOT[minneapolis$YEAR == 2010] head(newdata) ## [1] 33100 16000 1100 4800 0 NA 4.5 Deal with missing values In R, the missing values is presented as NA. Test the existence of missing values with is.na() function. We use an revised old example here. ID &lt;- c(1:4) # create variable ID Name &lt;- c(&#39;A&#39;, NA, &#39;C&#39;, &#39;D&#39;) # create variable Name Score &lt;- c(69.5, 77.5, NA, 90) # create variable Score df &lt;- data.frame(ID, Name, Score) # combine the varibles into one data frame called df is.na(df) ## ID Name Score ## [1,] FALSE FALSE FALSE ## [2,] FALSE TRUE FALSE ## [3,] FALSE FALSE TRUE ## [4,] FALSE FALSE FALSE Assign missing values df$Score[df$Score == 90] &lt;- NA df ## ID Name Score ## 1 1 A 69.5 ## 2 2 &lt;NA&gt; 77.5 ## 3 3 C NA ## 4 4 D NA NAs will influence some functions. mean(df$Score) # get the mean value (does not ignore NA) ## [1] NA mean(df$Score, na.rm=TRUE) # (ignore NA) ## [1] 73.5 Test if the observations in the dataset has NAs. complete.cases(df) ## [1] TRUE FALSE FALSE FALSE Find the observations with no NAs. na.omit(df) ## ID Name Score ## 1 1 A 69.5 4.6 Subset subset() is another way to select the data you want. Select observations in the Minneapolis population dataset when YEAR is equal to 2010. newdata &lt;- subset(minneapolis, YEAR == 2010) head(newdata) ## YEAR SEX AGE RACE HISPAN EDUC EMPSTAT INCTOT FTOTINC ## 1 2010 2 59 1 0 10 1 33100 49100 ## 2 2010 2 29 1 0 10 1 16000 49100 ## 3 2010 1 54 2 0 7 3 1100 NA ## 4 2010 2 47 2 0 5 2 4800 4800 ## 5 2010 1 59 2 0 10 2 0 4800 ## 6 2010 2 10 2 0 1 0 NA 4800 Select two columns from the dataset. newdata &lt;- subset(minneapolis, select = c(&#39;YEAR&#39;, &#39;AGE&#39;)) head(newdata, n = 5) ## YEAR AGE ## 1 2010 59 ## 2 2010 29 ## 3 2010 54 ## 4 2010 47 ## 5 2010 59 4.7 Merge two datasets merge() function does the same work as vlookup() in excel and Join function in ArcGIS. It links two datasets based on their common variable (the variable they both have). ID &lt;- c(1:4) # create variable ID Name &lt;- c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;) # create variable Name Score1 &lt;- c(69.5, 77.5, 99, 90) # create variable Score1 df1 &lt;- data.frame(ID, Name, Score1) # combine the varibles into one data frame called df1 df1 ## ID Name Score1 ## 1 1 A 69.5 ## 2 2 B 77.5 ## 3 3 C 99.0 ## 4 4 D 90.0 Name &lt;- c(&#39;A&#39;, &#39;D&#39;, &#39;C&#39;) # create variable Name Score2 &lt;- c(98, 46, 55) # create variable Score2 df2 &lt;- data.frame(Name, Score2) # combine the varibles into one data frame called df2 df2 ## Name Score2 ## 1 A 98 ## 2 D 46 ## 3 C 55 merge(df1, df2, # dataframes needs to be merged by = &#39;Name&#39;, # name of the column/variable used for merging all.x = TRUE) # keep all observations in the first dataframe after merging ## Name ID Score1 Score2 ## 1 A 1 69.5 98 ## 2 B 2 77.5 NA ## 3 C 3 99.0 55 ## 4 D 4 90.0 46 merge(df1, df2, by = &#39;Name&#39;, all.y = TRUE) # keep all observations in the first dataframe after merging ## Name ID Score1 Score2 ## 1 A 1 69.5 98 ## 2 C 3 99.0 55 ## 3 D 4 90.0 46 You could keep all the observations in both two data frames by set all = TRUE in the function. 4.8 Column operation Column operation or vector operation is a very important idea in R. It applies the operations in two columns or the function in one column directly rather than applies them on each element one by one. ID &lt;- c(1:4) # create variable ID Name &lt;- c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;) # create variable Name Score1 &lt;- c(69.5, 77.5, 99, 90) # create variable Score1 Score2 &lt;- c(98, 46, 55, 70) # create variable Score2 df &lt;- data.frame(ID, Name, Score1, Score2) # combine the varibles into one data frame called df df ## ID Name Score1 Score2 ## 1 1 A 69.5 98 ## 2 2 B 77.5 46 ## 3 3 C 99.0 55 ## 4 4 D 90.0 70 Create a new column in the dataframe to calculate the sum of score 1 and score 2 df$totalsocre &lt;- df$Score1 + df$Score2 df ## ID Name Score1 Score2 totalsocre ## 1 1 A 69.5 98 167.5 ## 2 2 B 77.5 46 123.5 ## 3 3 C 99.0 55 154.0 ## 4 4 D 90.0 70 160.0 Create a new column in the dataframe to calculate the mean of score 1 and score 2 df$meansocre &lt;- (df$Score1 + df$Score2)/2 df ## ID Name Score1 Score2 totalsocre meansocre ## 1 1 A 69.5 98 167.5 83.75 ## 2 2 B 77.5 46 123.5 61.75 ## 3 3 C 99.0 55 154.0 77.00 ## 4 4 D 90.0 70 160.0 80.00 "],["final-project.html", "Chapter 5 Final Project 5.1 Description 5.2 Timeline 5.3 Proposal 5.4 Final submission", " Chapter 5 Final Project 5.1 Description R is the tool serving for analyzing data and visualizing results. In the final project, you will use the R programming skills you learn from this course and also the knowledge outside the course (other R techniques you are interested in and your professional knowledge in your study major) to solve a research question. The research question could be related your study field (e.g., public policy, urban and regional planning, public health, etc.), or what you are interested in, or your previous course or research project but you do it with R instead. You could use any packages in R to solve the problem. For example, you could use plots to do descriptive analysis. Or you could use regression to find correlation or causality. The final product is a poster. This assignment accounts for 30% of your final grades. 5.2 Timeline To accomplish the final project, you need to finish two tasks. Task Descriptions Due Date 1 Proposal Your research question and data source introduction 16th Apr. 2 Poster A poster representing your analysis result 7th May. 5.3 Proposal In this task, you will need to submit the proposal file (either word or pdf). The instructor will give you feedback but will not grade this part. The rubric is just for helping you check the requirements. Requirements Research question and description of research question is clear Clearly state the data sources (what is the dataset, where do you find it, what variables you will use from this dataset) State the potential method you will use for data analysis (descriptive analysis, simple regression, etc.) The proposal should be less than one page, 12 font size, and single space. 5.4 Final submission In this part, you will submit your data file, revised codes (R file), and the poster (PDF file). The instructor will grade them based on the rubric below. The poster * should include research question (as the title of the poster), your name, study purpose, data source, plots/tables, and important findings * should include at least two plots generated by your R codes * should include no more than four plots * could include include one table generated by your R codes, but not necessarily Category Requirements Grades Codes Codes could generate the results (figures, tables, and related statistics) 7 Necessary notes for the codes 2 Codes is neat and well-organized 1 Poster Research question and study purpose are clear 2 Clearly state the data sources (what is the dataset, where do you find it, what variables you use from this dataset) 2 Figures contain the necessary parts, well-organized, and visually good/ tables are well-organized 12 Description of the important findings is clear 2 Poster is well-organized 2 You can find a poster template file (PowerPoint file) on Canvas website. You can choose to follow the format of this template or change it. "],["references.html", "Chapter 6 References", " Chapter 6 References Blischak, John, Daniel Chen, Harriet Dashnow, and Denis Haine. 2019. Data Types and Structures. October 8, 2019. https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures/. DataMentor. 2019. R Operators. October 11, 2019. https://www.datamentor.io/r-programming/operator/. Kabacoff, Robert I. 2019. Data Types. October 8, 2019. https://www.statmethods.net/input/datatypes.html. Quick-R. 2019a. Exporting Data. October 21, 2019. https://www.statmethods.net/input/exportingdata.html. . 2019b. Getting Information on a Dataset. October 21, 2019. https://www.statmethods.net/input/contents.html. . 2019c. Importing Data. October 21, 2019. https://www.statmethods.net/input/importingdata.html. Selvam, Sindhu. 2019. Introduction to RStudio. October 8, 2019. https://datascienceplus.com/introduction-to-rstudio/. tutorialspoint. 2019a. R - Operators. October 8, 2019. https://www.tutorialspoint.com/r/r_operators.htm. . 2019b. R - Variables. October 13, 2019. https://www.tutorialspoint.com/r/r_variables.htm. "]]
