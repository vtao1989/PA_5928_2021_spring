scale_y_continuous(limits = c(-1, 1), ## set the color for y axis
breaks = c(-1, -0.5, 0, 0.5, 1),
labels= c('-100%', '-50%', '0', '50%', '100%')) +
geom_hline(yintercept = 0) + ## add a horizontal line at 0
labs(title = 'Election result and population density in US (2020)', ## change labels
x = 'Population density (people/sq km)',
y = 'Vote margin (%)') +
theme_bw() +
theme(legend.position = 'none', ## remove legend
axis.text = element_text(size = 10),  ## adjust font size for different components
axis.title = element_text(size = 12),
plot.title = element_text(size = 14))
election %>%
left_join(pop_density, by = c('county_fips'='GEOID')) %>%
select(per_point_diff, B01001_calc_PopDensity) %>%
filter(complete.cases(.)) %>%
rename(diff = per_point_diff,
popden = B01001_calc_PopDensity) %>%
mutate(party = ifelse(diff > 0, 0, 1)) %>% ## create a variable
ggplot(aes(popden, -diff, size = popden, fill = factor(party))) + ## map population density to size and party to fill of the points
geom_point(shape = 21, color = 'white') + ## change the shape of the point and set the border color to white
scale_fill_manual(values = c('red', 'blue')) + ## set the color for party
scale_x_log10(breaks = c(0.1, 1, 10, 100, 1000, 10000), ## set the ticks for x axis
labels = c('0.1', '1', '10', '100', '1000', '10000')) +
scale_y_continuous(limits = c(-1, 1), ## set the color for y axis
breaks = c(-1, -0.5, 0, 0.5, 1),
labels= c('-100', '-50', '0', '50', '100')) +
geom_hline(yintercept = 0) + ## add a horizontal line at 0
labs(title = 'Election result and population density in US (2020)', ## change labels
x = 'Population density (people/sq km)',
y = 'Vote margin (%)') +
theme_bw() +
theme(legend.position = 'none', ## remove legend
axis.text = element_text(size = 10),  ## adjust font size for different components
axis.title = element_text(size = 12),
plot.title = element_text(size = 14))
library(tidyverse)
performance <- read_csv('StudentsPerformance.csv')
performance <- read_csv('StudentsPerformance.csv')
performance <- performance %>%
rename(race = `race/ethnicity`,
pedu = `parental level of education`,
pre = `test preparation course`,
math = `math score`)
str(performance)
performance %>%
ggplot(aes(gender, math)) +
geom_boxplot()
performance %>%
ggplot(aes(race, math)) +
geom_boxplot()
performance %>%
ggplot(aes(pedu, math)) +
geom_boxplot() +
scale_x_discrete(limits = c('some high school', 'high school', 'some college', 'associate\'s degree', 'bachelor\'s degree', 'master\'s degree'))
performance %>%
ggplot(aes(lunch, math)) +
geom_boxplot()
performance %>%
ggplot(aes(pre, math)) +
geom_boxplot()
performance %>%
ggplot(aes(math)) +
geom_histogram(binwidth = 5)
performance %>%
mutate(gender = ifelse(gender == 'male', 1, 0),
pre = ifelse(pre == 'completed', 1, 0),
lunch = ifelse(lunch == 'standard', 1, 0),
pedu = case_when(
pedu == 'some high school' ~ 1,
pedu == 'high school' ~ 2,
pedu == 'some college' ~ 3,
pedu == 'associate\'s degree' ~ 4,
pedu == 'bachelor\'s degree' ~ 5,
pedu == 'master\'s degree' ~ 6,
)) %>%
lm(math ~ gender + pre + lunch + pedu + race,
data = .) %>%
summary()
performance <- read_csv('StudentsPerformance.csv')
str(performance)
?plot
library(dplyr)
library(ggplot2)
minneaplis <- read.csv('minneapolis.csv')
?stat_smooth
## select observations from 2017
minneapolis_2017 <- filter(minneaplis, YEAR == 2017)
p <- ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point()
p + stat_smooth(method = 'lm') # fit a linear line for the points
p + stat_smooth(method = 'loess') # non-linear line
p <- ggplot(minneapolis_2017, aes(AGE))
p + geom_histogram(binwidth = 5) # the width of each category is 5
p +  geom_histogram(bins = 30) # the number of bins is 30
p + geom_histogram(aes( y = ..density..), binwidth = 5, col = 'Black', fill = 'White') + # use density instead of count
geom_density(alpha = .2, fill = 'Grey')
p +  geom_histogram(aes( y = ..density..), bins = 30) # the number of bins is 30
p + geom_histogram(aes( y = ..density..), binwidth = 5) + # use density instead of count
geom_density(alpha = .2, fill = 'Grey')
p + geom_histogram(aes( y = ..density..), binwidth = 5, fill = 'white') + # use density instead of count
geom_density(alpha = .2, fill = 'Grey')
p + geom_freqpoly()
p + geom_freqpoly(binwidth = 5)
p <- ggplot(minneapolis_2017, aes(factor(SEX), INCTOT))
p + geom_boxplot()
ggplot(minneapolis_2017, aes(x = RACE)) +
geom_bar() +
geom_text(aes(label = ..count..), stat = "count", vjust = 1.5, colour = "white")
?geom_text
ggplot(minneapolis_2017, aes(x = RACE)) +
geom_bar() +
geom_text(aes(label = ..count..), stat = 'count', vjust = 0, colour = 'white')
ggplot(minneapolis_2017, aes(x = RACE)) +
geom_bar() +
geom_text(aes(label = ..count..), stat = 'count', vjust = 1.5, colour = 'white')
ggplot(minneapolis_2017, aes(x = RACE)) +
geom_bar() +
geom_text(aes(label = ..count..), vjust = 1.5, colour = 'white')
ggplot(minneapolis_2017, aes(x = RACE)) +
geom_bar() +
geom_text(aes(label = ..count..), stat = 'count', vjust = 1.5, colour = 'white')
## count the number of respondents based on RACE
minneaplis_race <- minneapolis_2017 %>%
group_by(RACE) %>%
summarise(count = n())
ggplot(minneaplis_race, aes(RACE, count)) +
geom_col() +
geom_text(aes(label = count), vjust = -0.3)
vignette("ggplot2-specs")
ggplot(minneapolis_2017, aes(x = RACE)) +
geom_bar() +
geom_text(aes(label = ..count..), stat = 'count', vjust = 1, colour = 'white')
ggplot(minneapolis_2017, aes(x = RACE)) +
geom_bar() +
geom_text(aes(label = ..count..), stat = 'count', vjust = 1.5, colour = 'white')
ggplot(minneapolis_2017, aes(x = RACE)) +
geom_bar() +
geom_text(aes(stat = 'count', vjust = 1.5, colour = 'white')
ggplot(minneapolis_2017, aes(x = RACE)) +
geom_bar() +
geom_text(aes(label = ..count..), stat = 'count', vjust = 1.5, colour = 'white')
## count the number of respondents based on RACE
minneaplis_race <- minneapolis_2017 %>%
group_by(RACE) %>%
summarise(count = n())
ggplot(minneaplis_race, aes(RACE, count)) +
geom_col() +
geom_text(aes(label = count), vjust = -1)
## count the number of respondents based on RACE
minneaplis_race <- minneapolis_2017 %>%
group_by(RACE) %>%
summarise(count = n())
ggplot(minneaplis_race, aes(RACE, count)) +
geom_col() +
geom_text(aes(label = count), vjust = -0.3)
## calculate the average personal income for each year
minneapolis_year <- minneapolis %>%
group_by(YEAR) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
library(dplyr)
library(ggplot2)
minneapolis <- read.csv('minneapolis.csv')
## select observations from 2017
minneapolis_2017 <- filter(minneapolis, YEAR == 2017)
p <- ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point()
p + stat_smooth(method = 'lm') # fit a linear line for the points
p + stat_smooth(method = 'loess') # non-linear line
p <- ggplot(minneapolis_2017, aes(AGE))
p + geom_histogram(binwidth = 5) # the width of each category is 5
p +  geom_histogram(bins = 30) # the number of bins is 30
p +  geom_histogram(aes( y = ..density..), bins = 30) # use density instead of count
p + geom_histogram(aes( y = ..density..), binwidth = 5) +
geom_density(alpha = 0.2, fill = 'Grey')
p + geom_freqpoly(binwidth = 5)
p <- ggplot(minneapolis_2017, aes(factor(SEX), INCTOT))
p + geom_boxplot()
ggplot(minneapolis_2017, aes(x = RACE)) +
geom_bar() +
geom_text(aes(label = ..count..), stat = 'count', vjust = 1.5, colour = 'white')
## count the number of respondents based on RACE
minneaplis_race <- minneapolis_2017 %>%
group_by(RACE) %>%
summarise(count = n())
ggplot(minneaplis_race, aes(RACE, count)) +
geom_col() +
geom_text(aes(label = count), vjust = -0.3)
## calculate the average personal income for each year
minneapolis_year <- minneapolis %>%
group_by(YEAR) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(col = 'Blue') +
geom_text(aes(label = round(AvgInc)), vjust = -0.4) +
scale_x_continuous(breaks = c(2010:2019))
## calculate the average personal income for each year
minneapolis_year <- minneapolis %>%
group_by(YEAR) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line() +
geom_text(aes(label = round(AvgInc)), vjust = -0.4)
## calculate the average personal income for each year
minneapolis_year <- minneapolis %>%
group_by(YEAR) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(type= 12) +
geom_text(aes(label = round(AvgInc)), vjust = -0.4)
## calculate the average personal income for each year
minneapolis_year <- minneapolis %>%
group_by(YEAR) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(linetype= 12) +
geom_text(aes(label = round(AvgInc)), vjust = -0.4)
## calculate the average personal income for each year
minneapolis_year <- minneapolis %>%
group_by(YEAR) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(linetype= 'dashed') +
geom_point() +
geom_text(aes(label = round(AvgInc)), vjust = -0.4)
## calculate the average personal income for each year
minneapolis_year <- minneapolis %>%
group_by(YEAR) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(linetype= 'dashed') +
geom_point() +
geom_text(aes(label = round(AvgInc)), vjust = -0.5)
## calculate the average personal income for each racial group in each year
minneapolis_year_race <- minneapolis %>%
group_by(YEAR, RACE) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
## line plot of the trend of average personal income
ggplot(minneapolis_year_race, aes(YEAR, AvgInc, col = factor(RACE))) +
geom_line() +
geom_text(aes(label = round(AvgInc)), vjust = -0.4, color = 'black') +
scale_x_continuous(breaks = c(2010:2019))
## calculate the average personal income for each racial group in each year
minneapolis_year_race <- minneapolis %>%
group_by(YEAR, RACE) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
## line plot of the trend of average personal income
ggplot(minneapolis_year_race, aes(YEAR, AvgInc, linetype = factor(RACE))) +
geom_line() +
geom_text(aes(label = round(AvgInc)), vjust = -0.4, color = 'black') +
scale_x_continuous(breaks = c(2010:2019))
## calculate the average personal income for each racial group in each year
minneapolis_year_race <- minneapolis %>%
group_by(YEAR, RACE) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
## line plot of the trend of average personal income
ggplot(minneapolis_year_race, aes(YEAR, AvgInc, linetype = factor(RACE))) +
geom_line() +
geom_text(aes(label = round(AvgInc)), vjust = -0.4, color = 'black')
## calculate the average personal income for each racial group in each year
minneapolis_year_race <- minneapolis %>%
group_by(YEAR, RACE) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
## line plot of the trend of average personal income
ggplot(minneapolis_year_race, aes(YEAR, AvgInc, linetype = factor(RACE))) +
geom_line() +
geom_text(aes(label = round(AvgInc)), vjust = -0.4, check_overlap = TRUE)
## calculate the average personal income for each racial group in each year
minneapolis_year_race <- minneapolis %>%
group_by(YEAR, RACE) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
## line plot of the trend of average personal income
ggplot(minneapolis_year_race, aes(YEAR, AvgInc, linetype = factor(RACE))) +
geom_line() +
geom_text(aes(label = round(AvgInc)), vjust = -0.4, color = 'black')
## calculate the average personal income for each racial group in each year
minneapolis_year_race <- minneapolis %>%
group_by(YEAR, RACE) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
## line plot of the trend of average personal income
ggplot(minneapolis_year_race, aes(YEAR, AvgInc, linetype = factor(RACE))) +
geom_line() +
geom_text(aes(label = round(AvgInc)), vjust = -0.4)
mean(minneapolis_2017$AGE) # mean
median(minneapolis_2017$AGE) # median
min(minneapolis_2017$AGE) # minimum value
max(minneapolis_2017$AGE) # maximum value
x <- quantile(minneapolis_2017$AGE)
x # list of quartiles
x[2] # select the value by its index
quantile(minneapolis_2017$AGE, 0.4) # 40% of the dataset
ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_point()
ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_jitter(size = 0.5) ## add some noise to the positions of the points and set the size of the points to be 0.5
ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_jitter(size = 0.5) +
geom_smooth(method = 'lm')
ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_jitter(size = 0.5) +
geom_smooth(method = 'lm')
lm_fit <- lm(EDUC ~ AGE,      # formula
data = minneapolis_2017) # dataset
summary(lm_fit)             # check result
summary(lm_fit)$r.squared   # value of R2
coefficients(lm_fit)        # only check the coefficient
minneapolis_age <- filter(minneapolis_2017, AGE <= 25)
ggplot(minneapolis_age, aes(AGE, EDUC)) +
geom_jitter(size = 0.5) +
geom_smooth(method = 'lm')
lm_fit <- lm(EDUC ~ AGE,
data = minneapolis_age)
summary(lm_fit)
mlm_fit <- lm(EDUC ~ AGE + SEX + factor(RACE),
minneapolis_2017)
summary(mlm_fit)
summary(mlm_fit)$r.squared
## create a variable to indicate the poverty status of the respondents
minneapolis_poverty <- minneapolis_2017 %>%
filter(!is.na(INCTOT)) %>%
mutate(poverty = ifelse(INCTOT <= 12228, 1, 0))
## logistic regression
logit_reg <- glm(poverty ~ AGE + EDUC + SEX + factor(RACE),
minneapolis_poverty,
family = binomial)
summary(logit_reg)
## count the number of respondents based on RACE
minneaplis_race <- minneapolis_2017 %>%
group_by(RACE) %>%
summarise(count = n())
ggplot(minneaplis_race, aes(RACE, count)) +
geom_col() +
geom_text(aes(label = count), vjust = -0.3)
library(dplyr)
library(ggplot2)
minneapolis <- read.csv('minneapolis.csv')
## select observations from 2017
minneapolis_2017 <- filter(minneapolis, YEAR == 2017)
p <- ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point()
p + stat_smooth(method = 'lm') # fit a linear line for the points
p + stat_smooth(method = 'loess') # non-linear line
p <- ggplot(minneapolis_2017, aes(AGE))
p + geom_histogram(binwidth = 5) # the width of each category is 5
p +  geom_histogram(bins = 30) # the number of bins is 30
p +  geom_histogram(aes( y = ..density..), bins = 30) # use density instead of count
p + geom_histogram(aes( y = ..density..), binwidth = 5) +
geom_density(alpha = 0.2, fill = 'Grey')
library(dplyr)
library(ggplot2)
minneapolis <- read.csv('minneapolis.csv')
## select observations from 2017
minneapolis_2017 <- filter(minneapolis, YEAR == 2017)
p <- ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point()
p + stat_smooth(method = 'lm') # fit a linear line for the points
p + stat_smooth(method = 'loess') # non-linear line
p <- ggplot(minneapolis_2017, aes(AGE))
p + geom_histogram(binwidth = 5) # the width of each category is 5
p +  geom_histogram(bins = 30) # the number of bins is 30
p +  geom_histogram(aes( y = ..density..), bins = 30) # use density instead of count
p + geom_histogram(aes( y = ..density..), binwidth = 5) +
geom_density(alpha = 0.2, fill = 'Grey')
p + geom_freqpoly(binwidth = 5)
p <- ggplot(minneapolis_2017, aes(factor(SEX), INCTOT))
p + geom_boxplot()
ggplot(minneapolis_2017, aes(x = RACE)) +
geom_bar() +
geom_text(aes(label = ..count..), stat = 'count', vjust = 1.5, colour = 'white')
## count the number of respondents based on RACE
minneaplis_race <- minneapolis_2017 %>%
group_by(RACE) %>%
summarise(count = n())
ggplot(minneaplis_race, aes(RACE, count)) +
geom_col() +
geom_text(aes(label = count), vjust = -0.3)
## calculate the average personal income for each year
minneapolis_year <- minneapolis %>%
group_by(YEAR) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(linetype= 'dashed') +
geom_point() +
geom_text(aes(label = round(AvgInc)), vjust = -0.5)
## calculate the average personal income for each racial group in each year
minneapolis_year_race <- minneapolis %>%
group_by(YEAR, RACE) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
## line plot of the trend of average personal income
ggplot(minneapolis_year_race, aes(YEAR, AvgInc, linetype = factor(RACE))) +
geom_line() +
geom_text(aes(label = round(AvgInc)), vjust = -0.4)
mean(minneapolis_2017$AGE) # mean
median(minneapolis_2017$AGE) # median
min(minneapolis_2017$AGE) # minimum value
max(minneapolis_2017$AGE) # maximum value
x <- quantile(minneapolis_2017$AGE)
x # list of quartiles
x[2] # select the value by its index
quantile(minneapolis_2017$AGE, 0.4) # 40% of the dataset
ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_point()
ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_jitter(size = 0.5) ## add some noise to the positions of the points and set the size of the points to be 0.5
ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_jitter(size = 0.5) +
geom_smooth(method = 'lm')
lm_fit <- lm(EDUC ~ AGE,      # formula
data = minneapolis_2017) # dataset
summary(lm_fit)             # check result
summary(lm_fit)$r.squared   # value of R2
coefficients(lm_fit)        # only check the coefficient
minneapolis_age <- filter(minneapolis_2017, AGE <= 25)
ggplot(minneapolis_age, aes(AGE, EDUC)) +
geom_jitter(size = 0.5) +
geom_smooth(method = 'lm')
lm_fit <- lm(EDUC ~ AGE,
data = minneapolis_age)
summary(lm_fit)
mlm_fit <- lm(EDUC ~ AGE + SEX + factor(RACE),
minneapolis_2017)
summary(mlm_fit)
summary(mlm_fit)$r.squared
## create a variable to indicate the poverty status of the respondents
minneapolis_poverty <- minneapolis_2017 %>%
filter(!is.na(INCTOT)) %>%
mutate(poverty = ifelse(INCTOT <= 12228, 1, 0))
## logistic regression
logit_reg <- glm(poverty ~ AGE + EDUC + SEX + factor(RACE),
minneapolis_poverty,
family = binomial)
summary(logit_reg)
mlm_fit <- lm(EDUC ~ AGE + factor(SEX) + factor(RACE),
minneapolis_2017)
summary(mlm_fit)
summary(mlm_fit)$r.squared
str(minneapolis_2017)
## create a variable to indicate the poverty status of the respondents
minneapolis_poverty <- minneapolis_2017 %>%
filter(!is.na(INCTOT)) %>%
mutate(poverty = ifelse(INCTOT <= 12228, 1, 0))
## logistic regression
logit_reg <- glm(poverty ~ AGE + EDUC + factor(SEX) + factor(RACE),
minneapolis_poverty,
family = binomial)
summary(logit_reg)
## create a variable to indicate the poverty status of the respondents
minneapolis_poverty <- minneapolis_2017 %>%
filter(!is.na(INCTOT)) %>%
mutate(poverty = ifelse(INCTOT <= 12228, 1, 0))
## logistic regression
logit_reg <- glm(poverty ~ AGE + EDUC + factor(SEX) + factor(RACE),
minneapolis_poverty,
family = binomial)
summary(logit_reg)
ggplot(minneapolis_2017, aes(EDUC, AGE)) +
geom_jitter(size = 0.5)
ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_jitter(size = 0.5)
ggplot(minneapolis_2017, aes(AGE, factor(SEX))) +
geom_jitter(size = 0.5)
ggplot(minneapolis_2017, aes(factor(SEX), EDUC)) +
geom_jitter(size = 0.5)
ggplot(minneapolis_2017, aes(factor(SEX), EDUC)) +
geom_boxplot()
ggplot(minneapolis_2017, aes(factor(RACE), EDUC)) +
geom_boxplot()
## create a variable to indicate the poverty status of the respondents
minneapolis_poverty <- minneapolis_2017 %>%
filter(!is.na(INCTOT)) %>%
mutate(poverty = ifelse(INCTOT <= 12228, 1, 0))
ggplot(minneapolis_poverty, aes(AGE, poverty)) +
geom_jitter()
ggplot(minneapolis_poverty, aes(AGE, poverty)) +
geom_jitter(size = 0.5)
ggplot(minneapolis_poverty, aes(EDUC, poverty)) +
geom_jitter(size = 0.5)
ggplot(minneapolis_poverty, aes(factor(SEX), poverty)) +
geom_jitter(size = 0.5)
ggplot(minneapolis_poverty, aes(factor(RACE), poverty)) +
geom_jitter(size = 0.5)
ggplot(minneapolis_poverty, aes(AGE, fill = factor(poverty))) +
geom_histgram()
ggplot(minneapolis_poverty, aes(AGE, fill = factor(poverty))) +
geom_histogram()
ggplot(minneapolis_poverty, aes(EDUC, fill = factor(poverty))) +
geom_bar()
ggplot(minneapolis_poverty, aes(EDUC, fill = factor(RACE))) +
geom_bar()
ggplot(minneapolis_poverty, aes(EDUC, fill = factor(RACE))) +
geom_bar()
ggplot(minneapolis_poverty, aes(RACE, fill = factor(poverty))) +
geom_bar()
ggplot(minneapolis_poverty, aes(RACE, fill = factor(poverty))) +
geom_bar()
ggplot(minneapolis_poverty, aes(SEX, fill = factor(poverty))) +
geom_bar()
ggplot(minneapolis_poverty, aes(AGE, fill = factor(poverty))) +
geom_density()
ggplot(minneapolis_poverty, aes(AGE, fill = factor(poverty))) +
geom_density(fill = NULL)
ggplot(minneapolis_poverty, aes(AGE, fill = factor(poverty))) +
geom_density(fill = NA)
ggplot(minneapolis_poverty, aes(AGE, fill = factor(poverty))) +
geom_density(alpha = 0.5)
ggplot(minneapolis_poverty, aes(AGE, fill = factor(poverty))) +
geom_histogram()
## logistic regression
logit_reg <- glm(poverty ~ AGE + EDUC + factor(SEX) + factor(RACE),
minneapolis_poverty,
family = binomial)
summary(logit_reg)
