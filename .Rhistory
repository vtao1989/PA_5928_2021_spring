tail(minneapolis, n = 5)
names(minneapolis)
colnames(minneapolis)
str(minneapolis)
dim(minneapolis)
nrow(minneapolis)
ncol(minneapolis)
head(minneapolis$SEX, n = 5) # by name
head(minneapolis[1], n = 5) # by index
head(minneapolis$YEAR, n = 5) # by name
head(minneapolis[1], n = 5) # by index
head(minneapolis[c('YEAR', 'SEX')], n = 5) # by name
head(mtcars[c(1, 3, 5)], n = 5) # by index
head(minneapolis[c('YEAR', 'SEX')], n = 5) # by name
head(minneapolis[c(1, 3, 5)], n = 5) # by index
head(minneapolis)
minneapolis[1,] # by index number
minneapolis[2,] # by index number
minneapolis[2:3, ] # by index
minneapolis[c(1,5,9), ] # by index
minneapolis[minneapolis$YEAR == 2010, ]
minneapolis[(minneapolis$YEAR == 2010) & (minnepolis$EDUC < 5), ]
minneapolis[(minneapolis$YEAR == 2010) & (minneapolis$EDUC < 5), ]
minneapolis$EDUC[minneapolis$EDUC < 5]
minneapolis$EDUC[minneapolis$YEAR == 2010]
newdata <- subset(minneapolis, YEAR == 2010)
newdata
names(minneapolis)
newdata <- subset(mtcars, select = c('YEAR', 'AGE'))
newdata <- subset(minneapolis, select = c('YEAR', 'AGE'))
head(newdata, n = 5)
newdata <- minneapolis[(minneapolis$YEAR == 2010) & (minneapolis$EDUC < 5), ]
head(newdata)
ID <- c(1:4) # create variable ID
Name <- c('A', 'B', 'C', 'D') # create variable Name
Score1 <- c(69.5, 77.5, 99, 90) # create variable Score1
df1 <- data.frame(ID, Name, Score1) # combine the varibles into one data frame called df1
df1
Name <- c('A', 'D', 'C') # create variable Name
Score2 <- c(98, 46, 55) # create variable Score2
df2 <- data.frame(Name, Score2) # combine the varibles into one data frame called df2
df2
merge(df1, df2,       # dataframes needs to be merged
by = 'Name',    # name of the column/variable used for merging
all.x = TRUE)   # keep all observations in the first dataframe after merging
merge(df1, df2,
by = 'Name',
all.y = TRUE) # keep all observations in the first dataframe after merging
newdata <- minneapolis$YEAR[minneapolis$EDUC < 5, ]
newdata <- minneapolis$YEAR[minneapolis$EDUC < 5]
head(newdata)
names(minneapolis)
newdata <- minneapolis$INCTOT[minneapolis$YEAR == 2010]
head(newdata)
?head
minneapolis <- read.csv('minneapolis.csv')
table(minneapolis$HISPAN)
library(dplyr)
minneapolis <- read.csv('minneapolis.csv')
names(minneapolis)
df <- select(minneapolis, # name of the data frame
YEAR, SEX, AGE) # column names you want to select
head(df, 3)
df <- select(mtcars, # name of the data frame
c(1:3)) # index of the columns you want to select
head(df, 3)
df <- select(minneapolis, # name of the data frame
c(1:3)) # index of the columns you want to select
head(df, 3)
minneapolis %>% # name of the data frame
select(YEAR, SEX, AGE) %>% # select the columns by their names
head(3)
minneapolis %>% select(YEAR, SEX, AGE) %>% head(3)
minneapolis %>%
select(., YEAR, SEX, AGE)
head(., 3)
minneapolis %>%
select(., YEAR, SEX, AGE) %>%
head(., 3)
minneapolis %>%
select(-HISPAN) %>%
head(3)
minneapolis %>%
select(-HISPAN, - FTOTINC) %>%
head(3)
minneapolis %>%
select(YEAR:RACE) %>% # select from mpg to hp in the data frame
head(3)
minneapolis %>%
filter(YEAR == 2015) %>%
head(3)
minneapolis %>%
filter(YEAR == 2015, AGE == 37)
minneapolis %>%
filter(YEAR == 2015, AGE == 37, SEX == 1) %>%
head(3)
minneapolis %>%
arrange(INCTOT) %>% # arrange mpg in ascending order
head(10)
minneapolis %>%
arrange(FINCTOT) %>% # arrange mpg in ascending order
head(10)
minneapolis %>%
arrange(FTOTINC) %>% # arrange mpg in ascending order
head(10)
minneapolis %>%
arrange(AGE) %>% # arrange mpg in ascending order
head(10)
minneapolis %>%
arrange(desc(AGE)) %>%
head(10)
minneapolis %>%
arrange(desc(YEAR)) %>%
head(10)
minneapolis %>%
arrange(YEAR) %>% # arrange mpg in ascending order
head(10)
minneapolis %>%
filter(YEAR == 2010) %>%
select(YEAR, SEX, AGE) %>%
arrange(desc(SEX), AGE) %>%
head(10)
minneapolis %>%
mutate(INCTOT = INCTOT/1000) %>% ## transfer the unit of personal income from dollar to k dollars
head(10)
minneapolis %>%
filter(YEAR == 2010) %>%
select(YEAR, SEX, AGE) %>%
arrange(desc(SEX), AGE) %>%
head(5)
minneapolis %>%
mutate(INCTOT = INCTOT/1000) %>% ## transfer the unit of personal income from dollar to k dollars
head(5)
minneapolis %>%
mutate(INCTOTK = INCTOT/1000) %>% ## transfer the unit of personal income from dollar to k dollar
head(5)
minneapolis %>%
select(INCTOT, FINCTOT) %>%
mutate(INCTOTK = INCTOT/1000, FTOTINCK = FTOTINC/1000) %>%
head(10)
minneapolis %>%
select(INCTOT, FTOTINC) %>%
mutate(INCTOTK = INCTOT/1000, FTOTINCK = FTOTINC/1000) %>%
head(10)
minneapolis %>%
group_by(YEAR) %>%
summarise(count = n(),
AvgInc = mean(INCTOT))
minneapolis %>%
group_by(YEAR) %>%
summarise(count = n(),
AvgInc = mean(INCTOT, na.rm = T))
minneapolis %>%
group_by(YEAR, RACE) %>%
summarise(MaxInc = mean(TOTINC))
minneapolis %>%
group_by(YEAR, RACE) %>%
summarise(MaxInc = mean(INCTOT))
minneapolis %>%
group_by(YEAR, RACE) %>%
summarise(MaxInc = max(INCTOT, na.rm = T))
minneapolis %>%
filter(YEAR == 2010) %>%
group_by(YEAR, RACE) %>%
summarise(MaxInc = max(INCTOT, na.rm = T))
minneapolis %>%
arrange(desc(YEAR)) %>%
head(10)
minneapolis %>%
filter(YEAR == 2010) %>%
group_by(YEAR, RACE) %>%
summarise(MaxInc = max(INCTOT, na.rm = T))
minneapolis %>%
filter(YEAR == 2010) %>%
group_by(YEAR, RACE) %>%
summarise(MaxInc = max(INCTOT, na.rm = T))
ID <- c(1:4) # create variable ID
Name <- c('A', 'B', 'C', 'D') # create variable Name
Score1 <- c(69.5, 77.5, 99, 90) # create variable Score1
df1 <- data.frame(ID, Name, Score1) # combine the variables into one data frame called df1
df1
Name <- c('A', 'D', 'C') # create variable Name
Score2 <- c(98, 46, 55) # create variable Score2
df2 <- data.frame(Name, Score2) # combine the variables into one data frame called df2
df2
minneapolis %>%
select(-(YEAR:RACE)) %>% # exclude the variables from YEAR to RACE in the data frame
head(3)
library(dplyr)
minneapolis <- read.csv('minneapolis.csv')
minneapolis %>%
select(-(YEAR:RACE)) %>% # exclude the variables from YEAR to RACE in the data frame
head(3)
?head
?sum
data <- c(1, 4, 5, NA)
mean(data, na.rm = T)
data <- c(1, 4, 5, NA)
mean(data)
data <- c(1, 4, 5, NA)
mean(data, na.rm = T)
data <- c(1, 4, 5, NA)
mean(data, T)
data <- c(1, 4, 5, NA)
mean(data, na.rm = T)
names(minneapolis)
minneapolis %>%
select(starts_with('E')) %>%
head(3)
minneapolis %>%
select(ends_with('E')) %>%
head(3)
minneapolis %>%
select(starts_with('EM')) %>%
head(3)
minneapolis %>%
select(starts_with('E')) %>%
head(3)
minneapolis %>%
select(contains('TOT')) %>%
head(3)
minneapolis %>%
filter(YEAR == 2015,
INCTOT > mean(INCTOT, na.rm = T)) %>%
head(3)
minneapolis %>%
filter(YEAR == 2015 & INCTOT > mean(INCTOT, na.rm = T)) %>%
head(3)
minneapolis %>%
filter(YEAR == 2015| YEAR == 2017) %>% ## select those in 2015 or 2017
head(3)
minneapolis %>%
filter(YEAR == 2015 | YEAR == 2017) %>% ## select those in 2015 or 2017
head()
minneapolis %>%
arrange(YEAR) %>% # arrange mpg in ascending order
head(10)
minneapolis %>%
arrange(YEAR) %>% # arrange YEAR in ascending order
head(5)
minneapolis %>%
arrange(desc(YEAR)) %>%
head(10)
minneapolis %>%
arrange(desc(YEAR)) %>%
head(5)
minneapolis %>%
filter(YEAR == 2010) %>%
select(YEAR, SEX, AGE) %>%
arrange(desc(SEX), AGE) %>%
head(5)
library(dplyr)
minneapolis <- read.csv('minneapolis.csv')
minneapolis %>%
arrange_all() %>%
head(5)
minneapolis %>%
arrange_all(desc) %>%
head(5)
minneapolis %>%
arrange_all(desc) %>%
head(10)
?arrange_all
?starts_with
?starts_with
minneapolis %>%
select(INCTOT) %>%
mutate(INCTOTK = INCTOT/1000) %>% ## transfer the unit of personal income from dollar to k dollar
head(5)
minneapolis %>%
select(INCTOT, FTOTINC) %>%
mutate(INCTOTK = INCTOT/1000, FTOTINCK = FTOTINC/1000) %>%
head(10)
minneapolis %>%
select(INCTOT, FTOTINC) %>%
mutate(INCTOTK = INCTOT/1000,
FTOTINCK = FTOTINC/1000) %>%
head(10)
minneapolis %>%
mutate(
SEX = ifelse(SEX == 1, 'Male', 'Female')
) %>%
head()
minneapolis %>%
mutate(
SEX = ifelse(SEX == 1, 'Male', 'Female')
) %>%
head(5)
?case_when
minneapolis %>%
mutate(
RACE = case_when(
RACE == 1 ~ 'White',
RACE == 2 ~ 'African American',
RACE == 3 ~ 'American Indian'
)
) %>%
head(5)
?median
minneapolis %>%
mutate(
IncLevl = case_when(
INCTOT < median(INCTOT, na.rm = T) ~ 'Low income',
INCTOT > median(INCTOT, na.rm = T) ~ 'High income',
TRUE ~ 'Median income'
)
) %>%
head(5)
minneapolis %>%
mutate(
IncLevl = case_when(
INCTOT < median(INCTOT, na.rm = T) ~ 'Low income',
INCTOT > median(INCTOT, na.rm = T) ~ 'High income',
TRUE ~ 'Median income'
)
) %>%
select(IncLevl) %>%
head(5)
minneapolis %>%
mutate(
IncLevl = case_when(
INCTOT < median(INCTOT, na.rm = T) ~ 'Low income',
INCTOT > median(INCTOT, na.rm = T) ~ 'High income',
TRUE ~ 'Median income'
)
) %>%
head(5)
?mutate_all
minneapolis %>%
group_by(YEAR) %>%
summarise(count = n(),
AvgInc = mean(INCTOT, na.rm = T))
minneapolis %>%
group_by(YEAR, RACE) %>% ## aggregate the data based on YEAR and RACE
summarise(MaxInc = max(INCTOT, na.rm = T)) ## maximum personal income for different racial groups in each year
minneapolis %>%
group_by(YEAR, RACE) %>% ## aggregate the data based on YEAR and RACE
mutate(
RACE = case_when( ## change RACE from numeric values to racial categories
RACE == 1 ~ 'White',
RACE == 2 ~ 'African American',
RACE == 3 ~ 'American Indian'
)
) %>%
summarise(MaxInc = max(INCTOT, na.rm = T)) ## maximum personal income for different racial groups in each year
Name <- c('A', 'B', 'C') # create variable Name
MathScore <- c(87, 98, 95) # create variable Score1
df1 <- data.frame(ID, Name, MathScore) # combine the variables into one data frame
Name <- c('A', 'B', 'C') # create variable Name
MathScore <- c(87, 98, 95) # create variable Score1
df1 <- data.frame(Name, MathScore) # combine the variables into one data frame
df1
Name <- c('B', 'D', 'C', 'A') # create variable Name
PhysicsScore <- c(99, 66, 98, 77) # create variable Score2
df2 <- data.frame(Name, PhysicsScore) # combine the variables into one data frame
df2
df1 %>%
left_join(df2, by = 'Name')
df1 %>%
right_join(df2, by = 'Name')
library(dplyr)
minneapolis <- read.csv('minneapolis.csv')
## import poverty threshold dataset
poverty <- read.csv('poverty.csv')
## join the poverty threshold dataset to the Minneapolis ACS dataset based on YEAR
minneapolis %>%
left_join(poverty, by = 'YEAR') %>%
head(10)
## import poverty threshold dataset
poverty <- read.csv('poverty.csv')
head(poverty, 10)
minneapolis %>%
rename(TIME = YEAR) %>% ## rename the YEAR to TIME
left_join(poverty, by = c('TIME' = 'YEAR')) %>%
head(10)
max_income <- minneapolis %>%
mutate(
RACE = case_when( ## change RACE from numeric values to racial categories
RACE == 1 ~ 'White',
RACE == 2 ~ 'African American',
RACE == 3 ~ 'American Indian'
)
) %>%
group_by(YEAR, RACE) %>% ## aggregate the data based on YEAR and RACE
summarise(MaxInc = max(INCTOT, na.rm = T)) ## maximum personal income for different racial groups in each year
head(max_income)
max_income <- minneapolis %>%
mutate(
RACE = case_when( ## change RACE from numeric values to racial categories
RACE == 1 ~ 'White',
RACE == 2 ~ 'African American',
RACE == 3 ~ 'American Indian'
)
) %>%
group_by(YEAR, RACE) %>% ## aggregate the data based on YEAR and RACE
summarise(MaxInc = max(INCTOT, na.rm = T)) ## maximum personal income for different racial groups in each year
head(max_income)
max_income <- minneapolis %>%
mutate(
RACE = case_when( ## change RACE from numeric values to racial categories
RACE == 1 ~ 'White',
RACE == 2 ~ 'African American',
RACE == 3 ~ 'American Indian'
)
) %>%
group_by(YEAR, RACE) %>% ## aggregate the data based on YEAR and RACE
summarise(MaxInc = max(INCTOT, na.rm = T)) ## maximum personal income for different racial groups in each year
head(max_income, 10)
?spread
library(tidyr)
?spread
?pivot_wider
library(tidyr)
max_income %>%
pivot_wider(RACE, MaxInc)
library(tidyr)
max_income %>%
pivot_wider(names_from = RACE, values_from = MaxInc)
library(tidyr)
wide_data <- max_income %>%
pivot_wider(names_from = RACE, values_from = MaxInc)
wide_data
wide_data %>%
pivot_longer(cols = `African American`:White, names_to = 'RACE', value_to = 'MaxInc')
wide_data %>%
pivot_longer(cols = 'African American':White, names_to = 'RACE', value_to = 'MaxInc')
names(wide_data)
wide_data %>%
pivot_longer(cols = `African American`:White, names_to = 'RACE', value_to = 'MaxInc')
wide_data %>%
pivot_longer(cols = YEAR:White, names_to = 'RACE', value_to = 'MaxInc')
wide_data %>%
pivot_longer(cols = YEAR:White, names_to = 'RACE', values_to = 'MaxInc')
wide_data %>%
pivot_longer(cols = `African American`:White, names_to = 'RACE', values_to = 'MaxInc')
## import the Minneapolis ACS dataset
minneapolis <- read.csv('minneapolis.csv')
View(minneapolis)
plot(minneapolis$AGE, minneapolis$INCTOT) # with first as x, and second as y
## import the Minneapolis ACS dataset
minneapolis <- read.csv('minneapolis.csv')
minneapolis <- filter(minneapolis, YEAR == 2010)
plot(minneapolis$AGE, minneapolis$INCTOT) # with first as x, and second as y
## import the Minneapolis ACS dataset
minneapolis <- read.csv('minneapolis.csv')
plot(minneapolis$EDUC, minneapolis$INCTOT) # with first as x, and second as y
names(minneapolis)
plot(minneapolis$AGE, minneapolis$INCTOT) # with first as x, and second as y
plot(AGE ~ INCTOT, data = minneapolis) # you have to specify the name of the data frame here
plot(INCTOT ~ AGE, data = minneapolis) # you have to specify the name of the data frame here
year <- c(1998:2003) # create variable year
sales <- c(500, 600, 650, 700, 400, 550) # create variable sales
df <- data.frame(year, sales) # combine the variables into one data frame called df
plot(sales ~ year, data = df,
type = 'l') # type indicates the line type with l
mean_income <- minneapolis %>%
group_by(YEAR) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
plot(AvgInc ~ YEAR, data = mean_income,
type = 'l') # type indicates the line type with l
plot(AvgInc ~ YEAR,
data = mean_income,
type = 'b') # b for both line and pint
barplot(mean_income$AvgInc,
names.arg = mean_income$YEAR) # names.org indicates the vector of names to be plotted under each bar
barplot(mean_income$AvgInc,
names.arg = mean_income$YEAR,
main = 'Bar plot of the average personal income in Minneapolis (2010-2019)', # add title for the plot
xlab = 'Year', # add label tag for the x-axis
ylab = 'Personal income (dollars)',  # add label for the y-axis
ylim = c(0, 50000), # set the range of y axis, you could set the range of x axis with xlim
legend = 'Personal income') # add legend name
barplot(mean_income$AvgInc,
names.arg = mean_income$YEAR,
main = 'Bar plot of the average personal income in Minneapolis (2010-2019)', # add title for the plot
xlab = 'Year', # add label tag for the x-axis
ylab = 'Personal income (dollars)',  # add label for the y-axis
ylim = c(0, 60000), # set the range of y axis, you could set the range of x axis with xlim
legend = 'Personal income') # add legend name
barplot(mean_income$AvgInc,
names.arg = mean_income$YEAR,
main = 'Bar plot of the average personal income in Minneapolis (2010-2019)', # add title for the plot
xlab = 'Year', # add label tag for the x-axis
ylab = 'Personal income (dollars)',  # add label for the y-axis
ylim = c(0, 65000), # set the range of y axis, you could set the range of x axis with xlim
legend = 'Personal income') # add legend name
pie(mean_income$AvgInc, # value for each piece
labels = mean_income$YEAR, # label for each piece
main = 'Pie chart of average personal income in Minneaplis')
t <- c(1, 5, 10, 7, 8, 10, 11, 19)
boxplot(t, range = 0) # set range = 0 makes the whiskers reach the smallest and largest values in the dataset
t <- c(1, 5, 10, 7, 8, 10, 11, 19)
boxplot(t, range = 1) # set range = 1 makes the the whiskers extend to the most extreme data point which is no more than range times the interquartile range from the box
plot(AvgInc ~ YEAR,
data = mean_income,
type = 'b',
col = 'YellowGreen') # specify the name of the color
barplot(mean_income$AvgInc,
names.arg = mean_income$YEAR,
main = 'Bar plot of the average personal income in Minneapolis (2010-2019)',
xlab = 'Year',
ylab = 'Personal income (dollars)',
ylim = c(0, 65000),
legend = 'Personal income',
col = '#009999') # use the hexadecimal color code, you need to start it with the hash tag
library(tidyr)
mean_income <- minneapolis %>%
group_by(YEAR) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
plot(AvgInc ~ YEAR,
data = mean_income,
type = 'l') ## type indicates the line type with l
