ggplot(minneaplis_race, aes(RACE, count)) +
geom_col()
## calculate the average personal income for each year
minneapolis_year <- minneapolis %>%
group_by(YEAR) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
## line plot of the trend of average personal income
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(col = 'Blue') # indicate the color of the line by setting col = 'Blue'
## calculate the average personal income for each racial group in each year
minneapolis_year <- minneapolis %>%
group_by(YEAR, RACE) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
## line plot of the trend of average personal income
ggplot(minneapolis_year, aes(YEAR, AvgInc, col = factor(RACE))) +
geom_line()
ggplot(minneaplis_race, aes('', count, fill = factor(RACE))) +
geom_bar(width = 1, stat = 'identity') +
coord_polar('y') # transfer the coordinate system to the polar one
ggplot(minneaplis_race, aes('', count, fill = factor(RACE))) +
geom_bar(width = 1, stat = 'identity')
ggplot(minneaplis_race, aes('', count, fill = factor(RACE))) +
geom_bar(width = 1, stat = 'identity') +
coord_polar('y')
p <- ggplot(minneapolis_2017, aes(AGE, INCTOT)) +# store the plot result in variable p
geom_point()
p + facet_grid(. ~ RACE) # Facets, for each racial group
p + facet_grid(RACE ~ .) # Facets, pay attention to the position of RACE and the dot sign
p + facet_grid(SEX ~ RACE) # add vs
p + facet_grid(SEX ~ RACE, margins = T) # add aggregation plots for each row and column
p + facet_grid(SEX ~ RACE, labeller = label_both) # add more info in the label
ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point() +
facet_wrap(~EDUC)
p <- ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point()
p + coord_cartesian(xlim = c(16, 100), ylim = c(0,20000))
p <- ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_point()
p +  coord_fixed(ratio = 1) ## 1 mean the units are same in x and y axis
p + coord_fixed(ratio = 5)
p <- ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point() +
geom_smooth(method = 'loess')
p + labs(title = 'Age and personal income in Minneapolis (2017)', # title of the plot
subtitle = 'Data source: American Community Survey', # sub title
x = 'Age', # x label
y = 'Personal income (dollars)') # y label
p + ggtitle('Age and personal income in Minneapolis (2017)') + # title
xlab('Age') + # x label
ylab('Personal income (dollars)') # y label
p <- ggplot(minneapolis_2017, aes(factor(SEX), INCTOT))
p + geom_boxplot() +
scale_x_discrete(name = "Gender", # name of the x axis
labels = c('Male', 'Female')) # change 1 and 2 to Male and Female
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(col = 'Blue') +
scale_x_continuous(breaks = c(2010:2019))
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(col = 'Blue')
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(col = 'Blue')
View(minneapolis_year)
## calculate the average personal income for each racial group in each year
minneapolis_year_race <- minneapolis %>%
group_by(YEAR, RACE) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
## line plot of the trend of average personal income
ggplot(minneapolis_year_race, aes(YEAR, AvgInc, col = factor(RACE))) +
geom_line()
## calculate the average personal income for each year
minneapolis_year <- minneapolis %>%
group_by(YEAR) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
## line plot of the trend of average personal income
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(col = 'Blue') # indicate the color of the line by setting col = 'Blue'
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(col = 'Blue') +
scale_x_continuous(breaks = c(2010:2019))
?seq
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(col = 'Blue') +
scale_x_continuous(breaks = seq(2010, 2019, 2))
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(col = 'Blue') +
scale_x_continuous(breaks = seq(2010, 2019, 3))
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(col = 'Blue') +
scale_x_continuous(breaks = c(2010:2019))  +
scale_y_continuous(breaks = seq(30000, 50000, 5000))## set the ticks
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(col = 'Blue') +
scale_x_continuous(breaks = c(2010:2019))  +
scale_y_continuous(breaks = seq(30000, 50000, 2500))## set the ticks
?labs
p +
xlab(NULL) + # x label
ylab(NULL) # y label
p <- ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point() +
geom_smooth(method = 'loess')
p + labs(title = 'Age and personal income in Minneapolis (2017)', # title of the plot
subtitle = 'Data source: American Community Survey', # sub title
x = 'Age', # x label
y = 'Personal income (dollars)') # y label
p +
xlab(NULL) + # x label
ylab(NULL) # y label
library(ggplot2)
library(dplyr)
minneapolis <- read.csv('minneapolis.csv')
ggplot(minneapolis, ## Data
aes(x = AGE, y = INCTOT)) + ## Aesthetics
geom_point() + ## Geometries
facet_wrap(vars(YEAR)) + ## Facets
stat_smooth(method = "gam", se = FALSE, col = "blue") + # Statistics
scale_x_continuous('Age', limits = c(0, 100)) +
scale_y_continuous('Personal income (dollars)') + # Coordinates
labs(title = 'Age and personal income in Minneapolis (2010-2019)') +
theme_bw() # Themes
## select a subsample of those in 2017
minneapolis_2017 <- filter(minneapolis, YEAR == 2017)
## this example give us a simple example of ggplot2
ggplot(minneapolis_2017, # Data
aes(x = AGE, y = INCTOT)) + # Aesthetics
geom_point() # Geometries
ggplot(minneapolis_2017, aes(AGE, INCTOT, col = EDUC)) +
geom_point()
## remove observations with missing employment status from the dataset
## change EMPSTAT from numeric values to corresponding characteristic values
minneapolis_emp <- minneapolis_2017 %>%
filter(EMPSTAT != 0) %>%
mutate(
EMPSTAT = case_when(
EMPSTAT == 1 ~ 'Employed',
EMPSTAT == 2 ~ 'Unemployed',
EMPSTAT == 3 ~ 'Not in labor force'
)
)
ggplot(minneapolis_emp, aes(AGE, INCTOT, col = EMPSTAT)) +
geom_point()
ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point(col = 'blue')
ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point(alpha = 0.1)
ggplot(minneapolis_2017, aes(AGE, INCTOT, col = EDUC)) +
geom_point()
ggplot(minneapolis_2017, aes(x = RACE)) +
geom_bar()
## count the number of respondents based on RACE
minneaplis_race <- minneapolis_2017 %>%
group_by(RACE) %>%
summarise(count = n())
ggplot(minneaplis_race, aes(RACE, count)) +
geom_bar(stat = 'identity') # you need to specify stat = 'identity' to plot the value for each year
ggplot(minneaplis_race, aes(RACE, count)) +
geom_col()
## calculate the average personal income for each year
minneapolis_year <- minneapolis %>%
group_by(YEAR) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
## line plot of the trend of average personal income
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(col = 'Blue') # indicate the color of the line by setting col = 'Blue'
## calculate the average personal income for each racial group in each year
minneapolis_year_race <- minneapolis %>%
group_by(YEAR, RACE) %>%
summarise(AvgInc = mean(INCTOT, na.rm = T))
## line plot of the trend of average personal income
ggplot(minneapolis_year_race, aes(YEAR, AvgInc, col = factor(RACE))) +
geom_line()
ggplot(minneapolis_2017, aes(factor(RACE), INCTOT)) +
geom_boxplot()
ggplot(minneapolis_2017, aes(factor(RACE), INCTOT)) +
geom_jitter()
ggplot(minneapolis_2017, aes(factor(RACE), INCTOT)) +
geom_violin()
ggplot(minneapolis_2017, aes(factor(RACE), INCTOT, col = factor(SEX))) +
geom_violin()
ggplot(minneaplis_race, aes('', count, fill = factor(RACE))) +
geom_bar(width = 1, stat = 'identity') +
coord_polar('y') # transfer the coordinate system to the polar one
ggplot(minneaplis_race, aes('', count, fill = factor(RACE))) +
geom_bar(width = 1, stat = 'identity')
ggplot(minneaplis_race, aes('', count, fill = factor(RACE))) +
geom_bar(width = 1, stat = 'identity') +
coord_polar('y')
p <- ggplot(minneapolis_2017, aes(AGE, INCTOT)) +# store the plot result in variable p
geom_point()
p + facet_grid(. ~ RACE) # Facets, for each racial group
p + facet_grid(RACE ~ .) # Facets, pay attention to the position of RACE and the dot sign
p + facet_grid(SEX ~ RACE) # add vs
p + facet_grid(SEX ~ RACE, margins = T) # add aggregation plots for each row and column
p + facet_grid(SEX ~ RACE, labeller = label_both) # add more info in the label
ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point() +
facet_wrap(~EDUC)
p <- ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point()
p + coord_cartesian(xlim = c(16, 100), ylim = c(0,20000))
p <- ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_point()
p +  coord_fixed(ratio = 1) ## 1 mean the units are same in x and y axis
p + coord_fixed(ratio = 5)
p + coord_flip()
ggplot(minneapolis_2017, aes(factor(SEX), INCTOT)) +
geom_boxplot() +
coord_flip()
ggplot(minneapolis_2017, aes(x = RACE)) +
geom_bar() +
scale_y_reverse()
ggplot(minneapolis_2017, aes(x = '', fill = factor(EDUC))) +
geom_bar(width = 1) +
coord_polar(theta = 'y')
ggplot(minneapolis_2017, aes(x = factor(EDUC))) +
geom_bar(width = 1, col = 'Black', fill = 'Grey') +
coord_polar()
p <- ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point() +
geom_smooth(method = 'loess')
p + labs(title = 'Age and personal income in Minneapolis (2017)', # title of the plot
subtitle = 'Data source: American Community Survey', # sub title
x = 'Age', # x label
y = 'Personal income (dollars)') # y label
p + ggtitle('Age and personal income in Minneapolis (2017)') + # title
xlab('Age') + # x label
ylab('Personal income (dollars)') # y label
p +
xlab(NULL) + # x label
ylab(NULL) # y label
p <- ggplot(minneapolis_2017, aes(factor(SEX), INCTOT))
p + geom_boxplot() +
scale_x_discrete(name = "Gender", # name of the x axis
labels = c('Male', 'Female')) # change 1 and 2 to Male and Female
ggplot(minneapolis_year, aes(YEAR, AvgInc)) +
geom_line(col = 'Blue') +
scale_x_continuous(breaks = c(2010:2019))  +
scale_y_continuous(breaks = seq(30000, 50000, 2500))## set the ticks
p <- ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point() +
labs(title = 'Age and personal income in Minneapolis (2017)',
subtitle = 'Data source: American Community Survey',
x = 'Age',
y = 'Personal income (dollars)')
p # original plot
p + theme(plot.title = element_text(size = rel(2)))
p + theme(plot.title = element_text(size = 15))
p + theme(plot.background = element_rect(fill = 'red'))
p + theme(panel.background = element_rect(fill = 'green', color = 'red'))
p + theme(panel.border = element_rect(linetype = 'dashed', fill = NA))
p + theme(panel.grid.major = element_line(colour = 'black'),
panel.grid.minor = element_line(colour = 'blue'))
p + theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank())
p + theme(
panel.background = element_rect(fill = NA),
panel.grid.major = element_line(colour = 'Blue'),
panel.ontop = TRUE
)
p + theme(
axis.line = element_line(size = 2, colour = 'red')
)
p + theme(
axis.text = element_text(colour = 'Green', size = 15)
)
p + theme(
axis.ticks = element_line(size = 1.5)
)
p + theme(
axis.title.y = element_text(size = rel(1.5), angle = 30)
)
p <- ggplot(minneapolis_emp, aes(AGE, INCTOT, color = factor(EMPSTAT))) +
geom_point() +
labs(
x = 'Age',
y = 'Personal income (dollars)',
color = 'Employment status'
)
p ## orginal plot
p + theme(
legend.position = 'none'
)
p + theme(
legend.position = 'top'
)
p + theme(
legend.justification = 'top'
)
p + theme(
legend.position = c(.95, .95),
legend.justification = c('right', 'top'),
legend.box.just = 'right'
)
p + theme(
legend.box.background = element_rect(),
legend.box.margin = margin(6, 6, 6, 6)
)
p + theme(
legend.key = element_rect(fill = 'white', colour = 'black')
)
p + theme(
legend.text = element_text(size = 8, colour = 'red', face = 'bold')
)
p + theme_bw()
p + theme_minimal()
p + theme_dark()
p <- ggplot(minneapolis_emp, aes(AGE, INCTOT, color = factor(EMPSTAT))) +
geom_point() +
geom_smooth() +
labs(
x = 'Age',
y = 'Personal income (dollars)',
color = 'Employment status'
)
p ## original plot
p <- ggplot(minneapolis_emp, aes(AGE, INCTOT)) +
geom_point(aes(color = factor(EMPSTAT))) +
geom_smooth() +
labs(
x = 'Age',
y = 'Personal income (dollars)',
color = 'Employment status'
)
p ## original plot
p <- ggplot(minneapolis_emp, aes(AGE, INCTOT, color = factor(EMPSTAT))) +
geom_point() +
geom_smooth() +
labs(
x = 'Age',
y = 'Personal income (dollars)',
color = 'Employment status'
)
p ## original plot
p <- ggplot(minneapolis_emp, aes(AGE, INCTOT, color = factor(EMPSTAT))) +
geom_point() +
labs(
x = 'Age',
y = 'Personal income (dollars)',
color = 'Employment status'
)
p ## original plot
ggplot(minneapolis_2017, aes(x = RACE, fill = SEX)) +
geom_bar()
ggplot(minneapolis_2017, aes(x = RACE, fill = factor(SEX))) +
geom_bar()
library(dplyr)
library(ggplot2)
minneaplis <- read.csv('minneapolis.csv')
minneapolis_2017 <- filter(minneaplis, YEAR == 2017)
p <- ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point()
p + stat_smooth(method = "lm") # linear line
p + stat_smooth(method = 'loess') # non-linear line
p <- ggplot(minneapolis_2017, aes(AGE))
p + geom_histogram(binwidth = 5) # the width of each category is 5
p +  geom_histogram(bins = 30) # the number of bins is 30
p + geom_histogram(aes( y = ..density..), binwidth = 5, col = 'Black', fill = 'White') + # use density instead of count
geom_density(alpha = .2, fill = 'Grey')
p + geom_freqpoly()
p <- ggplot(minneapolis_2017, aes(factor(SEX), INCTOT))
p + geom_boxplot()
a <- c(10, 20, 30, 50, 33, 29, 10, 30, 100, 0, 4.5)
mean(a) # mean
median(a) # median
library(ggplot2)
ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point()
ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point() +
geom_smooth(method = "lm", se = F)
lm_fit <- lm(INCTOT ~ AGE,      # formula
data = minneapolis_2017) # dataset
summary(lm_fit)             # check result
lm_fit <- lm(INCTOT ~ AGE + I(AGE^2),      # formula
data = minneapolis_2017) # dataset
summary(lm_fit)             # check result
library(ggplot2)
ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_point()
library(ggplot2)
ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_jitter()
ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_jitter()
ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_point()
ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_jitter(size = 0.5)
ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_jitter(size = 0.5) +
geom_smooth(method = "lm", se = F)
lm_fit <- lm(EDUC ~ AGE,      # formula
data = minneapolis_2017) # dataset
summary(lm_fit)             # check result
ggplot(minneapolis_2017, aes(AGE, EDUC)) +
geom_jitter(size = 0.5) +
geom_smooth(method = "lm")
summary(lm_fit)$r.squared   # value of R2
coefficients(lm_fit)        # only check the coefficient
mlm_fit <- lm(EDUC ~ AGE + SEX + factor(RACE),
minneaplis_2017)
mlm_fit <- lm(EDUC ~ AGE + SEX + factor(RACE),
minneapolis_2017)
summary(mlm_fit)
summary(mlm_fit)$r.squared
mlm_fit <- lm(EDUC ~ AGE + SEX + factor(RACE),
minneapolis)
summary(mlm_fit)
summary(mlm_fit)$r.squared
mlm_fit <- lm(EDUC ~ AGE + SEX + factor(RACE),
minneapolis_2017)
summary(mlm_fit)
summary(mlm_fit)$r.squared
mlm_fit <- lm(EDUC ~ AGE + SEX + factor(RACE),
minneapolis_2017)
summary(mlm_fit)
summary(mlm_fit)$r.squared
names(minneaplis)
poverty <- read.csv('poverty.csv')
View(poverty)
minneapolis_poverty <- minneapolis_2017 %>%
filter(!is.na(INCTOT)) %>%
mutate(poverty = ifelse(INCTOT <= 12228, 1, 0))
View(minneapolis_poverty)
minneapolis_poverty <- minneapolis_2017 %>%
filter(!is.na(INCTOT)) %>%
mutate(poverty = ifelse(INCTOT <= 12228, 1, 0))
logit_reg <- glm(poverty ~ AGE + EDUC + SEC + factor(RACE),
minneapolis_poverty,
family = binomial)
minneapolis_poverty <- minneapolis_2017 %>%
filter(!is.na(INCTOT)) %>%
mutate(poverty = ifelse(INCTOT <= 12228, 1, 0))
logit_reg <- glm(poverty ~ AGE + EDUC + SEX + factor(RACE),
minneapolis_poverty,
family = binomial)
summary(logit_reg)
minneapolis_poverty <- minneapolis_2017 %>%
filter(!is.na(INCTOT)) %>%
mutate(poverty = ifelse(INCTOT <= 12228, 1, 0))
logit_reg <- glm(poverty ~ AGE + i(AGE^2) + EDUC + SEX + factor(RACE),
minneapolis_poverty,
family = binomial)
minneapolis_poverty <- minneapolis_2017 %>%
filter(!is.na(INCTOT)) %>%
mutate(poverty = ifelse(INCTOT <= 12228, 1, 0))
logit_reg <- glm(poverty ~ AGE + I(AGE^2) + EDUC + SEX + factor(RACE),
minneapolis_poverty,
family = binomial)
summary(logit_reg)
minneapolis_poverty <- minneapolis_2017 %>%
filter(!is.na(INCTOT)) %>%
mutate(poverty = ifelse(INCTOT <= 12228, 1, 0))
logit_reg <- glm(poverty ~ AGE + EDUC + SEX + factor(RACE),
minneapolis_poverty,
family = binomial)
summary(logit_reg)
library(dplyr)
library(ggplot2)
minneaplis <- read.csv('minneapolis.csv')
library(dplyr)
library(ggplot2)
minneaplis <- read.csv('minneapolis.csv')
## select observations from 2017
minneapolis_2017 <- filter(minneaplis, YEAR == 2017)
p <- ggplot(minneapolis_2017, aes(AGE, INCTOT)) +
geom_point()
p + stat_smooth(method = 'lm') # fit a linear line for the points
mean(minneapolis_2017$AGE) # mean
median(minneapolis_2017$AGE) # median
min(minneapolis_2017$AGE) # minimum value
max(minneapolis_2017$AGE) # maximum value
x <- quantile(minneapolis_2017$AGE)
x # list of quartiles
x[2] # select the value by its index
quantile(minneapolis_2017$AGE, 0.4) # 40% of the dataset
lm_fit <- lm(EDUC ~ AGE,      # formula
data = minneapolis_2017) # dataset
summary(lm_fit)             # check result
summary(lm_fit)$r.squared   # value of R2
coefficients(lm_fit)        # only check the coefficient
mlm_fit <- lm(EDUC ~ AGE + SEX + factor(RACE),
minneapolis_2017)
summary(mlm_fit)
summary(mlm_fit)$r.squared
## create a variable to indicate the poverty status of the respondents
minneapolis_poverty <- minneapolis_2017 %>%
filter(!is.na(INCTOT)) %>%
mutate(poverty = ifelse(INCTOT <= 12228, 1, 0))
## logistic regression
logit_reg <- glm(poverty ~ AGE + EDUC + SEX + factor(RACE),
minneapolis_poverty,
family = binomial)
summary(logit_reg)
ggplot(filter(minneapolis_2017, AGE < 25), aes(AGE, EDUC)) +
geom_jitter(size = 0.5) +
geom_smooth(method = 'lm')
lm_fit <- lm(EDUC ~ AGE,      # formula
data = filter(minneapolis_2017, AGE < 25)) # dataset
summary(lm_fit)             # check result
minneaplis_age <- filter(minneapolis_2017, AGE <= 25)
ggplot(minneapolis_age, aes(AGE, EDUC)) +
geom_jitter(size = 0.5) +
geom_smooth(method = 'lm')
minneapolis_age <- filter(minneapolis_2017, AGE <= 25)
ggplot(minneapolis_age, aes(AGE, EDUC)) +
geom_jitter(size = 0.5) +
geom_smooth(method = 'lm')
lm_fit <- lm(EDUC ~ AGE,
data = minneapolis_age)
summary(lm_fit)
