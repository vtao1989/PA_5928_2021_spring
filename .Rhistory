y = 'Vote margin',
size = 'Population density') +
theme_bw() +
theme(legend.position = 'none')
election %>%
left_join(pop_density, by = c('county_fips'='GEOID')) %>%
select(per_point_diff, B01001_calc_PopDensity) %>%
filter(complete.cases(.)) %>%
rename(diff = per_point_diff,
popden = B01001_calc_PopDensity) %>%
mutate(party = ifelse(diff > 0, 0, 1)) %>%
ggplot(aes(popden, -diff, size = popden, fill = factor(party))) +
geom_point(shape = 21, color = 'white', stroke = 0.5) +
scale_fill_manual(values = c('red', 'blue')) +
scale_x_log10(breaks = c(0.1, 1, 10, 100, 1000, 10000),
labels = c('0.1', '1', '10', '100', '1000', '10000')) +
scale_y_continuous(limits = c(-1, 1),
breaks = c(-1, -0.5, 0, 0.5, 1),
labels= c('-100%', '-50%', '0', '50%', '100%')) +
geom_hline(yintercept = 0) +
labs(title = 'Election result and population density in US (2020)',
x = 'Population density (people/sq km)',
y = 'Vote margin',
size = 'Population density') +
theme_bw() +
theme(legend.position = 'none')
election %>%
left_join(pop_density, by = c('county_fips'='GEOID')) %>%
select(per_point_diff, B01001_calc_PopDensity) %>%
filter(complete.cases(.)) %>%
rename(diff = per_point_diff,
popden = B01001_calc_PopDensity) %>%
mutate(party = ifelse(diff > 0, 0, 1)) %>%
ggplot(aes(popden, -diff, size = popden, fill = factor(party))) +
geom_point(shape = 21, color = 'white', stroke = 1) +
scale_fill_manual(values = c('red', 'blue')) +
scale_x_log10(breaks = c(0.1, 1, 10, 100, 1000, 10000),
labels = c('0.1', '1', '10', '100', '1000', '10000')) +
scale_y_continuous(limits = c(-1, 1),
breaks = c(-1, -0.5, 0, 0.5, 1),
labels= c('-100%', '-50%', '0', '50%', '100%')) +
geom_hline(yintercept = 0) +
labs(title = 'Election result and population density in US (2020)',
x = 'Population density (people/sq km)',
y = 'Vote margin',
size = 'Population density') +
theme_bw() +
theme(legend.position = 'none')
election %>%
left_join(pop_density, by = c('county_fips'='GEOID')) %>%
select(per_point_diff, B01001_calc_PopDensity) %>%
filter(complete.cases(.)) %>%
rename(diff = per_point_diff,
popden = B01001_calc_PopDensity) %>%
mutate(party = ifelse(diff > 0, 0, 1)) %>%
ggplot(aes(popden, -diff, size = popden, fill = factor(party))) +
geom_point(shape = 21, color = 'white') +
scale_fill_manual(values = c('red', 'blue')) +
scale_x_log10(breaks = c(0.1, 1, 10, 100, 1000, 10000),
labels = c('0.1', '1', '10', '100', '1000', '10000')) +
scale_y_continuous(limits = c(-1, 1),
breaks = c(-1, -0.5, 0, 0.5, 1),
labels= c('-100%', '-50%', '0', '50%', '100%')) +
geom_hline(yintercept = 0) +
labs(title = 'Election result and population density in US (2020)',
x = 'Population density (people/sq km)',
y = 'Vote margin',
size = 'Population density') +
theme_bw() +
theme(legend.position = 'none')
election %>%
left_join(pop_density, by = c('county_fips'='GEOID')) %>%
select(per_point_diff, B01001_calc_PopDensity) %>%
filter(complete.cases(.)) %>%
rename(diff = per_point_diff,
popden = B01001_calc_PopDensity) %>%
mutate(party = ifelse(diff > 0, 0, 1)) %>%
ggplot(aes(popden, -diff, size = popden, fill = factor(party))) +
geom_point(shape = 21, color = 'white', stroke = 1) +
scale_fill_manual(values = c('red', 'blue')) +
scale_x_log10(breaks = c(0.1, 1, 10, 100, 1000, 10000),
labels = c('0.1', '1', '10', '100', '1000', '10000')) +
scale_y_continuous(limits = c(-1, 1),
breaks = c(-1, -0.5, 0, 0.5, 1),
labels= c('-100%', '-50%', '0', '50%', '100%')) +
geom_hline(yintercept = 0) +
labs(title = 'Election result and population density in US (2020)',
x = 'Population density (people/sq km)',
y = 'Vote margin',
size = 'Population density') +
theme_bw() +
theme(legend.position = 'none')
election %>%
left_join(pop_density, by = c('county_fips'='GEOID')) %>%
select(per_point_diff, B01001_calc_PopDensity) %>%
filter(complete.cases(.)) %>%
rename(diff = per_point_diff,
popden = B01001_calc_PopDensity) %>%
mutate(party = ifelse(diff > 0, 0, 1)) %>%
ggplot(aes(popden, -diff, size = popden, fill = factor(party))) +
geom_point(shape = 21, color = 'white', stroke = 0.5) +
scale_fill_manual(values = c('red', 'blue')) +
scale_x_log10(breaks = c(0.1, 1, 10, 100, 1000, 10000),
labels = c('0.1', '1', '10', '100', '1000', '10000')) +
scale_y_continuous(limits = c(-1, 1),
breaks = c(-1, -0.5, 0, 0.5, 1),
labels= c('-100%', '-50%', '0', '50%', '100%')) +
geom_hline(yintercept = 0) +
labs(title = 'Election result and population density in US (2020)',
x = 'Population density (people/sq km)',
y = 'Vote margin',
size = 'Population density') +
theme_bw() +
theme(legend.position = 'none')
election %>%
left_join(pop_density, by = c('county_fips'='GEOID')) %>%
select(per_point_diff, B01001_calc_PopDensity) %>%
filter(complete.cases(.)) %>%
rename(diff = per_point_diff,
popden = B01001_calc_PopDensity) %>%
mutate(party = ifelse(diff > 0, 0, 1)) %>%
ggplot(aes(popden, -diff, size = popden, fill = factor(party))) +
geom_point(shape = 21, color = 'white') +
scale_fill_manual(values = c('red', 'blue')) +
scale_x_log10(breaks = c(0.1, 1, 10, 100, 1000, 10000),
labels = c('0.1', '1', '10', '100', '1000', '10000')) +
scale_y_continuous(limits = c(-1, 1),
breaks = c(-1, -0.5, 0, 0.5, 1),
labels= c('-100%', '-50%', '0', '50%', '100%')) +
geom_hline(yintercept = 0) +
labs(title = 'Election result and population density in US (2020)',
x = 'Population density (people/sq km)',
y = 'Vote margin',
size = 'Population density') +
theme_bw() +
theme(legend.position = 'none')
election %>%
left_join(pop_density, by = c('county_fips'='GEOID')) %>%
select(per_point_diff, B01001_calc_PopDensity) %>%
filter(complete.cases(.)) %>%
rename(diff = per_point_diff,
popden = B01001_calc_PopDensity) %>%
mutate(party = ifelse(diff > 0, 0, 1)) %>%
ggplot(aes(popden, -diff, size = popden, fill = factor(party))) +
geom_point(shape = 21, color = 'white') +
scale_fill_manual(values = c('red', 'blue')) +
scale_x_log10(breaks = c(0.1, 1, 10, 100, 1000, 10000),
labels = c('0.1', '1', '10', '100', '1000', '10000')) +
scale_y_continuous(limits = c(-1, 1),
breaks = c(-1, -0.5, 0, 0.5, 1),
labels= c('-100%', '-50%', '0', '50%', '100%')) +
geom_hline(yintercept = 0) +
labs(title = 'Election result and population density in US (2020)',
x = 'Population density (people/sq km)',
y = 'Vote margin',
size = 'Population density') +
theme_bw() +
theme(legend.position = 'none',
axis.text = element_text(size = 14),  ## adjust font sizes for different components
axis.title = element_text(size = 16),
plot.title = element_text(size = 18),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
## line plot of the relationships between race and income
minneapolis %>%
group_by(YEAR, RACE) %>%  ## calculate average personal income for races and years
summarise(AvgInc = mean(INCTOT, na.rm = T)) %>%
mutate(RACE = case_when(  ## change race from numbers to their corresponding labels
RACE == 1 ~ 'White',
RACE == 2 ~ 'African American',
RACE == 3 ~ 'Other'
)) %>%
ggplot(aes(YEAR, AvgInc, color = RACE)) +  ## line plot
geom_line() +
geom_point() +
labs(x = 'Year',
y = 'Average personal income (Dollars)',
color = 'RACE',
title = 'Race and personal income in Minneaplis (2010-2019)') +
scale_x_continuous(breaks = c(2010:2019)) +  ## adjust x axis tick labels
theme_bw() +
theme(legend.position = 'bottom', ## adjust legend position
axis.text = element_text(size = 10),  ## adjust font sizes for different components
axis.title = element_text(size = 12),
plot.title = element_text(size = 18),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10))
minneapolis <- read.csv('minneapolis.csv')
minneapolis_race <- minneapolis %>%
group_by(YEAR, RACE) %>%  ## calculate average personal income for races and years
summarise(AvgInc = mean(INCTOT, na.rm = T)) %>%
mutate(RACE = case_when(  ## change race from numbers to their corresponding labels
RACE == 1 ~ 'White',
RACE == 2 ~ 'African American',
RACE == 3 ~ 'Other'
))
head(minneapolis_race, 10)
ggplot(minneapolis_race, aes(YEAR, AvgInc, color = RACE)) +  ## line plot
geom_line() +
geom_point()
ggplot(minneapolis_race, aes(YEAR, AvgInc, color = RACE)) +  ## line plot
geom_line() +
geom_point() +
labs(x = 'Year',
y = 'Average personal income (Dollars)',
color = 'RACE',
title = 'Race and personal income in Minneaplis (2010-2019)') +
scale_x_continuous(breaks = c(2010:2019)) +  ## adjust x axis tick labels
theme_bw() +
theme(legend.position = 'bottom', ## adjust legend position
axis.text = element_text(size = 14),  ## adjust font sizes for different components
axis.title = element_text(size = 16),
plot.title = element_text(size = 18),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
## line plot of the relationships between race and income
minneapolis %>%
group_by(YEAR, RACE) %>%  ## calculate average personal income for races and years
summarise(AvgInc = mean(INCTOT, na.rm = T)) %>%
mutate(RACE = case_when(  ## change race from numbers to their corresponding labels
RACE == 1 ~ 'White',
RACE == 2 ~ 'African American',
RACE == 3 ~ 'Other'
)) %>%
ggplot(aes(YEAR, AvgInc, color = RACE)) +  ## line plot
geom_line() +
geom_point() +
labs(x = 'Year',
y = 'Average personal income (Dollars)',
color = 'RACE',
title = 'Race and personal income in Minneaplis (2010-2019)') +
scale_x_continuous(breaks = c(2010:2019)) +  ## adjust x axis tick labels
theme_bw() +
theme(legend.position = 'bottom', ## adjust legend position
axis.text = element_text(size = 10),  ## adjust font sizes for different components
axis.title = element_text(size = 12),
plot.title = element_text(size = 18),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10))
## line plot of the relationships between race and income
minneapolis %>%
group_by(YEAR, RACE) %>%  ## calculate average personal income for races and years
summarise(AvgInc = mean(INCTOT, na.rm = T)) %>%
mutate(RACE = case_when(  ## change race from numbers to their corresponding labels
RACE == 1 ~ 'White',
RACE == 2 ~ 'African American',
RACE == 3 ~ 'Other'
)) %>%
ggplot(aes(YEAR, AvgInc, color = RACE)) +  ## line plot
geom_line() +
geom_point() +
labs(x = 'Year',
y = 'Average personal income (Dollars)',
color = 'RACE',
title = 'Race and personal income in Minneaplis (2010-2019)') +
scale_x_continuous(breaks = c(2010:2019)) +  ## adjust x axis tick labels
theme_bw() +
theme(legend.position = 'bottom', ## adjust legend position
axis.text = element_text(size = 10),  ## adjust font sizes for different components
axis.title = element_text(size = 12),
plot.title = element_text(size = 14),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10))
ggplot(minneapolis_race, aes(YEAR, AvgInc, color = RACE)) +  ## line plot
geom_line() +
geom_point() +
labs(x = 'Year',
y = 'Average personal income (Dollars)',
color = 'RACE',
title = 'Race and personal income in Minneaplis (2010-2019)') +
scale_x_continuous(breaks = c(2010:2019)) +  ## adjust x axis tick labels
theme_bw() +
theme(legend.position = 'bottom', ## adjust legend position
axis.text = element_text(size = 10),  ## adjust font sizes for different components
axis.title = element_text(size = 12),
plot.title = element_text(size = 14),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10))
## line plot of the relationship between race and employment status
minneapolis %>%
group_by(YEAR, RACE, EMPSTAT)  %>% ## calculate average employment rate for races and years
summarise(count = n()) %>%
filter(EMPSTAT != 0, EMPSTAT != 3) %>%
group_by(YEAR, RACE) %>%
mutate(per = count/sum(count)*100) %>%
filter(EMPSTAT == 1) %>%
mutate(RACE = case_when(  ## change race from numbers to their corresponding labels
RACE == 1 ~ 'White',
RACE == 2 ~ 'African American',
RACE == 3 ~ 'Other'
)) %>%
ggplot(aes(YEAR, per, color = factor(RACE))) +  ## line plot
geom_line() +
geom_point() +
labs(x = 'Year',
y = 'Average employment rate (%)',
color = 'RACE',
title = 'Race and employment rate in Minneaplis (2010-2019)') +
scale_x_continuous(breaks = c(2010:2019)) +
scale_y_continuous(limits = c(70, 100),
breaks = c(75, 80, 85, 90, 95, 100)) +
theme_bw() +
theme(legend.position = 'bottom', ## adjust legend position
axis.text = element_text(size = 10),  ## adjust font sizes for different components
axis.title = element_text(size = 12),
plot.title = element_text(size = 14),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10))
pop_density <- read_csv('pop_density.csv')
election <- read_csv('2020_election.csv')
election %>%
left_join(pop_density, by = c('county_fips'='GEOID')) %>%
select(per_point_diff, B01001_calc_PopDensity) %>%
filter(complete.cases(.)) %>%
rename(diff = per_point_diff,
popden = B01001_calc_PopDensity) %>%
mutate(party = ifelse(diff > 0, 0, 1)) %>%
ggplot(aes(popden, -diff, size = popden, fill = factor(party))) +
geom_point(shape = 21, color = 'white') +
scale_fill_manual(values = c('red', 'blue')) +
scale_x_log10(breaks = c(0.1, 1, 10, 100, 1000, 10000),
labels = c('0.1', '1', '10', '100', '1000', '10000')) +
scale_y_continuous(limits = c(-1, 1),
breaks = c(-1, -0.5, 0, 0.5, 1),
labels= c('-100%', '-50%', '0', '50%', '100%')) +
geom_hline(yintercept = 0) +
labs(title = 'Election result and population density in US (2020)',
x = 'Population density (people/sq km)',
y = 'Vote margin',
size = 'Population density') +
theme_bw() +
theme(legend.position = 'bottom', ## adjust legend position
axis.text = element_text(size = 10),  ## adjust font sizes for different components
axis.title = element_text(size = 12),
plot.title = element_text(size = 14),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10))
election %>%
left_join(pop_density, by = c('county_fips'='GEOID')) %>%
select(per_point_diff, B01001_calc_PopDensity) %>%
filter(complete.cases(.)) %>%
rename(diff = per_point_diff,
popden = B01001_calc_PopDensity) %>%
mutate(party = ifelse(diff > 0, 0, 1)) %>%
ggplot(aes(popden, -diff, size = popden, fill = factor(party))) +
geom_point(shape = 21, color = 'white') +
scale_fill_manual(values = c('red', 'blue')) +
scale_x_log10(breaks = c(0.1, 1, 10, 100, 1000, 10000),
labels = c('0.1', '1', '10', '100', '1000', '10000')) +
scale_y_continuous(limits = c(-1, 1),
breaks = c(-1, -0.5, 0, 0.5, 1),
labels= c('-100%', '-50%', '0', '50%', '100%')) +
geom_hline(yintercept = 0) +
labs(title = 'Election result and population density in US (2020)',
x = 'Population density (people/sq km)',
y = 'Vote margin',
size = 'Population density') +
theme_bw() +
theme(axis.text = element_text(size = 10),  ## adjust font sizes for different components
axis.title = element_text(size = 12),
plot.title = element_text(size = 14))
election %>%
left_join(pop_density, by = c('county_fips'='GEOID')) %>%
select(per_point_diff, B01001_calc_PopDensity) %>%
filter(complete.cases(.)) %>%
rename(diff = per_point_diff,
popden = B01001_calc_PopDensity) %>%
mutate(party = ifelse(diff > 0, 0, 1)) %>%
ggplot(aes(popden, -diff, size = popden, fill = factor(party))) +
geom_point(shape = 21, color = 'white') +
scale_fill_manual(values = c('red', 'blue')) +
scale_x_log10(breaks = c(0.1, 1, 10, 100, 1000, 10000),
labels = c('0.1', '1', '10', '100', '1000', '10000')) +
scale_y_continuous(limits = c(-1, 1),
breaks = c(-1, -0.5, 0, 0.5, 1),
labels= c('-100%', '-50%', '0', '50%', '100%')) +
geom_hline(yintercept = 0) +
labs(title = 'Election result and population density in US (2020)',
x = 'Population density (people/sq km)',
y = 'Vote margin',
size = 'Population density') +
theme_bw() +
theme(legend.position = 'none', ## adjust legend position
axis.text = element_text(size = 10),  ## adjust font sizes for different components
axis.title = element_text(size = 12),
plot.title = element_text(size = 14))
election %>%
left_join(pop_density, by = c('county_fips'='GEOID')) %>%
select(per_point_diff, B01001_calc_PopDensity) %>%
filter(complete.cases(.)) %>%
rename(diff = per_point_diff,
popden = B01001_calc_PopDensity) %>%
ggplot(aes(popden, -diff)) +
geom_point() +
scale_x_log10() ## transform the x axis with logarithm
election %>%
left_join(pop_density, by = c('county_fips'='GEOID')) %>%
select(per_point_diff, B01001_calc_PopDensity) %>%
filter(complete.cases(.)) %>%
rename(diff = per_point_diff,
popden = B01001_calc_PopDensity) %>%
mutate(party = ifelse(diff > 0, 0, 1)) %>% ## create a variable
ggplot(aes(popden, -diff, size = popden, fill = factor(party))) + ## map population density to size and party to fill of the points
geom_point(shape = 21, color = 'white') + ## change the shape of the point and set the border color to white
scale_fill_manual(values = c('red', 'blue')) + ## set the color for party
scale_x_log10(breaks = c(0.1, 1, 10, 100, 1000, 10000), ## set the ticks for x axis
labels = c('0.1', '1', '10', '100', '1000', '10000')) +
scale_y_continuous(limits = c(-1, 1), ## set the color for y axis
breaks = c(-1, -0.5, 0, 0.5, 1),
labels= c('-100%', '-50%', '0', '50%', '100%')) +
geom_hline(yintercept = 0) + ## add a horizontal line at 0
labs(title = 'Election result and population density in US (2020)', ## change labels
x = 'Population density (people/sq km)',
y = 'Vote margin') +
theme_bw() +
theme(legend.position = 'none', ## remove legend
axis.text = element_text(size = 10),  ## adjust font size for different components
axis.title = element_text(size = 12),
plot.title = element_text(size = 14))
election %>%
left_join(pop_density, by = c('county_fips'='GEOID')) %>%
select(per_point_diff, B01001_calc_PopDensity) %>%
filter(complete.cases(.)) %>%
rename(diff = per_point_diff,
popden = B01001_calc_PopDensity) %>%
mutate(party = ifelse(diff > 0, 0, 1)) %>% ## create a variable
ggplot(aes(popden, -diff, size = popden, fill = factor(party))) + ## map population density to size and party to fill of the points
geom_point(shape = 21, color = 'white') + ## change the shape of the point and set the border color to white
scale_fill_manual(values = c('red', 'blue')) + ## set the color for party
scale_x_log10(breaks = c(0.1, 1, 10, 100, 1000, 10000), ## set the ticks for x axis
labels = c('0.1', '1', '10', '100', '1000', '10000')) +
scale_y_continuous(limits = c(-1, 1), ## set the color for y axis
breaks = c(-1, -0.5, 0, 0.5, 1),
labels= c('-100%', '-50%', '0', '50%', '100%')) +
geom_hline(yintercept = 0) + ## add a horizontal line at 0
labs(title = 'Election result and population density in US (2020)', ## change labels
x = 'Population density (people/sq km)',
y = 'Vote margin (%)') +
theme_bw() +
theme(legend.position = 'none', ## remove legend
axis.text = element_text(size = 10),  ## adjust font size for different components
axis.title = element_text(size = 12),
plot.title = element_text(size = 14))
election %>%
left_join(pop_density, by = c('county_fips'='GEOID')) %>%
select(per_point_diff, B01001_calc_PopDensity) %>%
filter(complete.cases(.)) %>%
rename(diff = per_point_diff,
popden = B01001_calc_PopDensity) %>%
mutate(party = ifelse(diff > 0, 0, 1)) %>% ## create a variable
ggplot(aes(popden, -diff, size = popden, fill = factor(party))) + ## map population density to size and party to fill of the points
geom_point(shape = 21, color = 'white') + ## change the shape of the point and set the border color to white
scale_fill_manual(values = c('red', 'blue')) + ## set the color for party
scale_x_log10(breaks = c(0.1, 1, 10, 100, 1000, 10000), ## set the ticks for x axis
labels = c('0.1', '1', '10', '100', '1000', '10000')) +
scale_y_continuous(limits = c(-1, 1), ## set the color for y axis
breaks = c(-1, -0.5, 0, 0.5, 1),
labels= c('-100', '-50', '0', '50', '100')) +
geom_hline(yintercept = 0) + ## add a horizontal line at 0
labs(title = 'Election result and population density in US (2020)', ## change labels
x = 'Population density (people/sq km)',
y = 'Vote margin (%)') +
theme_bw() +
theme(legend.position = 'none', ## remove legend
axis.text = element_text(size = 10),  ## adjust font size for different components
axis.title = element_text(size = 12),
plot.title = element_text(size = 14))
library(tidyverse)
performance <- read_csv('StudentsPerformance.csv')
performance <- read_csv('StudentsPerformance.csv')
performance <- performance %>%
rename(race = `race/ethnicity`,
pedu = `parental level of education`,
pre = `test preparation course`,
math = `math score`)
str(performance)
performance %>%
ggplot(aes(gender, math)) +
geom_boxplot()
performance %>%
ggplot(aes(race, math)) +
geom_boxplot()
performance %>%
ggplot(aes(pedu, math)) +
geom_boxplot() +
scale_x_discrete(limits = c('some high school', 'high school', 'some college', 'associate\'s degree', 'bachelor\'s degree', 'master\'s degree'))
performance %>%
ggplot(aes(lunch, math)) +
geom_boxplot()
performance %>%
ggplot(aes(pre, math)) +
geom_boxplot()
performance %>%
ggplot(aes(math)) +
geom_histogram(binwidth = 5)
performance %>%
mutate(gender = ifelse(gender == 'male', 1, 0),
pre = ifelse(pre == 'completed', 1, 0),
lunch = ifelse(lunch == 'standard', 1, 0),
pedu = case_when(
pedu == 'some high school' ~ 1,
pedu == 'high school' ~ 2,
pedu == 'some college' ~ 3,
pedu == 'associate\'s degree' ~ 4,
pedu == 'bachelor\'s degree' ~ 5,
pedu == 'master\'s degree' ~ 6,
)) %>%
lm(math ~ gender + pre + lunch + pedu + race,
data = .) %>%
summary()
performance <- read_csv('StudentsPerformance.csv')
str(performance)
